{"version":3,"sources":["particle-factory.js","player.js","env.js","table.js","App.js","reportWebVitals.js","index.js"],"names":["ParticleEmitterFactory","env","undefined","particles","Error","this","x","y","opts","Emitter","owner","options","particlesAdded","defaults","collisions","isStatic","size","min","max","amount","interval","velocity","direction","colors","delay","frictionAir","parent","collisionFilter","amountPerTick","decaySpeed","dir","toLowerCase","pos","running","e","requestAnimationFrame","addParticle","duplicate","emitter","posX","posY","engine","timing","timeScale","pSize","vel","number","interactive","numParticles","position","label","angle","Math","random","PI","dist","circleRadius","cos","sin","bounds","name","color","round","length","particle_opts","friction","frictionStatic","inertia","Bodies","polygon","isSensor","isParticle","density","restitution","restituition","render","fillStyle","particle","World","add","world","velX","velY","Boolean","Body","setVelocity","scale","setTimeout","decreaseScale","Composite","remove","framesPast","waitForInterval","runner","fps","i","window","innerWidth","innerHeight","Matter","Engine","Render","Runner","Composites","Common","Player","Grid","MouseConstraint","Mouse","Events","idx","max_health","health","pallete","original_color","shape","_build_shape","damage_dealt","string","strokeStyle","lineWidth","collision_filter","rectangle","player","is_player","category","mask","group","Infinity","emmiter","particle_factory","create","start","damage","die","health_percentage","alpha","console","log","stop","dead","died_at","Date","split","map","Color","Resolver","_restingThresh","_restingThreshTangent","clear","H","W","Env","game_data_callback","title","for","element_id","velocityIterations","gravity","element","document","getElementById","width","height","showAngleIndicator","showDebug","wireframes","run","build_play_field","add_mouse_control","build_players","register_events","lookAt","update_game_data","mouse","canvas","mouseConstraint","constraint","stiffness","visible","data","p1","p2","players","p","build_emitter","game_data","on","pairs","filter","el","_","bodyA","bodyB","pair","other","explode","take_damage","game_data_columns","Header","accessor","Table","props","stats","columns","useMemo","columns_copy","splice","game","start_time","toFixed","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","striped","bordered","hover","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","row","getRowProps","cells","cell","getCellProps","goals","game_init_data","App","useState","set_game_data_state","set_start_time","useEffect","innerHTML","setup","className","Button","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.75d4f23a.chunk.js","sourcesContent":["/* eslint no-unused-vars: \"off\" */\nimport { Engine, Render, Runner, Composites,\n  Composite, Common, World, Bodies, Grid,\n  MouseConstraint, Mouse, Body, Events, } from 'matter-js'\n\n\nexport class ParticleEmitterFactory {\n    constructor(env) {\n        if(env.particles !== undefined) { throw new Error(\"Only one factory per env\")}\n        this.env = env\n        this.env.particles = {}\n    }\n    create(x, y, opts) {\n        return new Emitter(x, y, {env: this.env, ...opts})\n    }\n}\n\nclass Emitter{\n    static numParticles = 0;\n\n    constructor(x, y, {owner, env, ...options}) {\n        this.env = env\n        this.particlesAdded = 0;\n        let defaults = Emitter.defaults;\n        //Reset options to defaults\n        if (options === undefined) {\n            options = defaults;\n        }\n        if (options.collisions === undefined) {\n            options.collisions = defaults.collisions;\n        }\n        if (options.isStatic === undefined) {\n            options.isStatic = defaults.isStatic;\n        }\n        if (options.size === undefined) {\n            options.size = defaults.size;\n        } else if (typeof options.size === \"number\") {\n            options.size = {\n                min: options.size,\n                max: options.size\n            };\n        }\n        if (options.amount === undefined) {\n            options.amount = defaults.amount;\n        }\n        if (options.interval === undefined) {\n            options.interval = defaults.interval;\n        }\n        if (options.velocity === undefined) {\n            options.velocity = defaults.velocity;\n        }\n        if (options.velocity.direction === undefined) {\n            options.velocity.direction = defaults.velocity.direction;\n        } else if (options.velocity.direction.x === undefined) {\n            options.velocity.direction.x = defaults.velocity.direction.x;\n        } else if (options.velocity.direction.y === undefined) {\n            options.velocity.direction.y = defaults.velocity.direction.y;\n        }\n        if (options.colors === undefined) {\n            options.colors = defaults.colors;\n        } else if (typeof options.colors === \"string\") {\n            options.colors = [options.colors];\n        }\n        if (options.delay === undefined) {\n            options.delay = defaults.delay;\n        }\n        if (options.frictionAir === undefined) {\n            options.frictionAir = defaults.frictionAir;\n        }\n        if (options.parent === undefined) {\n            options.parent = defaults.parent;\n        }\n        if (options.collisionFilter === undefined) {\n            options.collisionFilter = defaults.collisionFilter;\n        }\n        if (options.amountPerTick === undefined || options.amountPerTick < 1) {\n            options.amountPerTick = defaults.amountPerTick;\n        }\n        if (options.decaySpeed === undefined) {\n            options.decaySpeed = defaults.decaySpeed;\n        }\n        if (options.decaySpeed < 0) {\n            options.decaySpeed = 0;\n        }\n        if (options.decaySpeed > 1) {\n            options.decaySpeed = 1;\n        }\n\n        options.collisions = options.collisions ? false : true;\n\n        //Reset x/y to defaults\n        if (x === undefined) {\n            x = defaults.x;\n        }\n        if (y === undefined) {\n            y = defaults.y;\n        }\n\n        //Change velocity.direction\n        let dir = options.velocity.direction;\n        if (typeof dir.y === \"string\") {\n            dir.y = dir.y.toLowerCase();\n            if (dir.y === \"up\") {\n                options.velocity.direction.y = -1;\n            } else if (dir.y === \"down\") {\n                options.velocity.direction.y = 1;\n            } else if (dir.y === \"none\") {\n                options.velocity.direction.y = 0;\n            }\n        }\n        if (typeof dir.x === \"string\") {\n            dir.x = dir.x.toLowerCase();\n            if (dir.x === \"left\") {\n                options.velocity.direction.x = -1;\n            } else if (dir.x === \"right\") {\n                options.velocity.direction.x = 1;\n            } else if (dir.x === \"none\") {\n                options.velocity.direction.x = 0;\n            }\n        }\n\n        this.pos = { x: x, y: y }\n        this.options = options\n        this.running = false\n        this.owner = owner\n    }\n    stop() {\n        let e = this;\n        let amount = this.options.amount;\n        this.options.amount = 0;\n        this.running = false;\n        requestAnimationFrame(function() {\n            requestAnimationFrame(function() {\n                e.options.amount = amount;\n            });\n        });\n    }\n    start() {\n        this.running = true\n        this.particlesAdded = 0;\n        this.addParticle();\n    }\n    addParticle(duplicate) {\n        let emitter = this\n        let pos = this.pos;\n        let posX = pos.x;\n        let posY = pos.y;\n        let options = this.options;\n        let delay = options.delay / this.env.engine.timing.timeScale;\n        let pSize = options.size;\n        let colors = options.colors;\n        let vel = options.velocity;\n        let number = options.amount;\n        let interval = options.interval;\n        let interactive = options.collisions;\n        let frictionAir = options.frictionAir;\n        let direction = options.velocity.direction;\n        let collisionFilter = options.collisionFilter;\n        let amountPerTick = options.amountPerTick;\n\n        this.numParticles++;\n        this.particlesAdded++;\n\n        if (this.options.parent !== undefined) {\n            let parent = this.options.parent;\n            pos = parent.position;\n            this.pos = pos;\n\n            if (parent.label === \"Circle Body\") {\n                let angle = Math.random() * Math.PI * 2;\n                let dist = Math.random() * parent.circleRadius;\n\n                posX = dist * Math.cos(angle) + posX;\n                posY = dist * Math.sin(angle) + posY;\n            } else if (parent.label === \"Rectangle Body\") {\n                posX =\n                    Math.random() * (parent.bounds.max.x - parent.bounds.min.x) +\n                    parent.bounds.min.x;\n                posY =\n                    Math.random() * (parent.bounds.max.y - parent.bounds.min.y) +\n                    parent.bounds.min.y;\n            }\n        }\n\n        let name = \"particle\" + this.numParticles;\n        let size = random(pSize.min, pSize.max);\n        let color = colors[Math.round(random(colors.length))];\n        color = color !== undefined ? color : colors[0];\n\n        if (color === \"random\") {\n            let r = random(0, 255);\n            let g = random(0, 255);\n            let b = random(0, 255);\n            color = \"rgb(\" + r + \", \" + g + \", \" + b + \")\";\n        }\n\n        let particle_opts = (({\n            friction,\n            frictionStatic,\n            inertia\n        }) => ({\n            friction,\n            frictionStatic,\n            inertia\n        }))(this.options);\n        this.env.particles[name] = Bodies.polygon(posX, posY, 6, size, {\n            isSensor: interactive,\n            isParticle: true,\n            isStatic: this.options.isStatic,\n            density: 1,\n            restitution: this.options.restituition,\n            frictionAir: frictionAir,\n            decaySpeed: options.decaySpeed,\n            render: {\n                fillStyle: color\n            },\n            ...particle_opts\n        });\n        let particle = this.env.particles[name];\n        particle.owner = this.owner\n        World.add(this.env.world, particle);\n\n        if (collisionFilter !== undefined) {\n            particle.collisionFilter = collisionFilter;\n        }\n\n        let velX = random(0, vel.x);\n        let velY = random(0, vel.y);\n\n        if (vel.y === undefined) {\n            velY = random(0, 2);\n        }\n        if (vel.x === undefined) {\n            velX = random(0, 2);\n        }\n\n        if (direction.x === undefined || direction.x === 0) {\n            velX = Boolean(Math.round(random())) ? velX : velX * -1;\n        } else {\n            velX *= direction.x;\n        }\n\n        if (direction.y === undefined || direction.y === 0) {\n            velY = Boolean(Math.round(random())) ? velY : velY * -1;\n        } else {\n            velY *= direction.y;\n        }\n        Body.setVelocity(particle, {\n            x: velX,\n            y: velY\n        });\n\n        let scale = 1;\n\n        function decreaseScale() {\n            scale -= options.decaySpeed * emitter.env.engine.timing.timeScale;\n            particle.circleRadius = size * scale;\n            if (particle.circleRadius > options.decaySpeed) {\n                requestAnimationFrame(decreaseScale);\n            } else {\n                Composite.remove(emitter.env.world, particle);\n            }\n        }\n        setTimeout(decreaseScale, delay);\n\n        if (this.particlesAdded < number && !duplicate) {\n            if (interval > 0) {\n                let framesPast = 0;\n                function waitForInterval() {\n                    if (emitter.options.amount > 0) {\n                        framesPast += emitter.env.engine.timing.timeScale;\n                        if (emitter.env.runner !== undefined && emitter.env.runner.fps !== undefined) {\n                            if (framesPast >= interval / (1000 / emitter.env.runner.fps)) {\n                                if (amountPerTick > 1) {\n                                    for (let i = amountPerTick; i--;) {\n                                        if (i !== 0) {\n                                            emitter.addParticle(true);\n                                        } else {\n                                            emitter.addParticle();\n                                        }\n                                    }\n                                } else {\n                                    emitter.addParticle();\n                                }\n                            } else {\n                                requestAnimationFrame(waitForInterval);\n                            }\n                        } else {\n                            if (\n                                framesPast >=\n                                interval / 16.67 / emitter.env.engine.timing.timeScale\n                            ) {\n                                for (let i = amountPerTick; i--;) {\n                                    if (i !== 0) {\n                                        emitter.addParticle(true);\n                                    } else {\n                                        emitter.addParticle();\n                                    }\n                                }\n                            } else {\n                                requestAnimationFrame(waitForInterval);\n                            }\n                        }\n                    } else {\n                        emitter.running = false;\n                    }\n                }\n                requestAnimationFrame(waitForInterval);\n            } else {\n                this.addParticle();\n            }\n        }\n    }\n\n    static defaults = {\n        colors: [\"#FE601C\", \"#EBDB14\", \"#EB471F\", \"#ED7A0E\"],\n        collisions: false,\n        isStatic: false,\n        x: window.innerWidth / 2,\n        y: window.innerHeight / 2,\n        size: {\n            min: 0.5,\n            max: 2\n        },\n        amount: 50,\n        interval: 0,\n        amountPerTick: 1,\n        velocity: {\n            x: 5,\n            y: 5,\n            direction: {\n                x: \"none\",\n                y: \"none\"\n            }\n        },\n        delay: 400,\n        decaySpeed: 0.1,\n        frictionAir: 0.02,\n        parent: undefined,\n        collisionFilter: undefined\n    }\n}\n\nfunction random(min, max) {\n        if (min === undefined && max === undefined) {\n            min = 0;\n            max = 1;\n        } else if (max === undefined) {\n            max = min;\n            min = 0;\n        }\n        return Math.random() * (max - min) + min;\n}\n\n","/* eslint no-unused-vars: \"off\" */\nimport Color from \"color\";\nimport Matter from \"matter-js\"\n\nvar Engine = Matter.Engine,\n  Render = Matter.Render,\n  Runner = Matter.Runner,\n  Composites = Matter.Composites,\n  Composite = Matter.Composite,\n  Common = Matter.Common,\n  World = Matter.World,\n  Bodies = Matter.Bodies,\n  Grid = Matter.Grid,\n  MouseConstraint = Matter.MouseConstraint,\n  Mouse = Matter.Mouse,\n  Body = Matter.Body,\n  Events = Matter.Events;\n\n\nexport default class Player {\n  ///////////////////// PLAYER\n  static get pallete() {\n    let out = '#F51720 #FA26A0 #F8D210 #2FF3E0'.split(' ').map(x => new Color(x))\n    return out\n  }\n\n  static idx = 0;\n  constructor(x, y, env) {\n    this.idx = Player.idx++;\n    this.max_health = 100;\n    this.health = this.max_health;\n    this.env = env;\n    this.world = this.env.world;\n    this.color = Player.pallete[this.idx % Player.pallete.length]\n    this.original_color = Player.pallete[this.idx % Player.pallete.length]\n    this.shape = this._build_shape(x, y);\n    this.damage_dealt = 0\n  }\n\n  _build_shape(x, y) {\n    let opts = {\n      isStatic: true,\n      render: {\n        fillStyle: this.color.string(),\n        strokeStyle: \"white\",\n        lineWidth: 3\n      },\n      collisionFilter: this.collision_filter\n    };\n    let shape = Bodies.rectangle(x, y, 30, 30, opts);\n    shape.player = this;\n    shape.is_player = true;\n    return shape;\n  }\n\n  get collision_filter() {\n    let category = 1 << (this.idx + 1); // +1 because category 1 is the default (walls)\n    let mask = -1 ^ category; // colide with all but yourself\n    return { category: category, mask: mask, group: 0 };\n  }\n\n  build_emitter() {\n    let opts = {\n      amount: Infinity,\n      interval: 1001, // in millis\n      amountPerTick: 1, // batch size\n      size: { min: 5, max: 20 },\n      delay: 1000 * 10,\n      collisions: true,\n      restituition: 1,\n      colors: this.original_color.string(),\n      collisionFilter: this.collision_filter,\n      frictionStatic: 0,\n      frictionAir: 0,\n      friction: 0,\n      decaySpeed: 0.03,\n    };\n    // Composite.add(this.world, Bodies.polygon(300, 300, 10, 50, {restituition: 1, friction:0, frictionAir:0, frictionStatic:0}))\n    // return\n    this.emmiter = this.env.particle_factory.create(\n      this.x,\n      this.y,\n      {owner: this, ...opts}\n    );\n    this.emmiter.start();\n  }\n\n  get x() {\n    return this.shape.position.x;\n  }\n\n  get y() {\n    return this.shape.position.y;\n  }\n\n  take_damage(damage) {\n    this.health -= damage;\n    if (this.health <= 0) {\n      this.die();\n    }\n    let health_percentage = this.health / this.max_health;\n    this.color = this.color.alpha(health_percentage)\n    this.shape.render.fillStyle = this.color.string();\n    return damage\n  }\n\n  die() {\n    console.log(`Player ${this.idx} DIED`);\n    Composite.remove(this.world, this.shape);\n    this.emmiter.stop();\n    this.dead = true;\n    this.died_at = new Date()\n  }\n}\n\n","/* eslint no-unused-vars: \"off\" */\n\nimport Matter from \"matter-js\"\nimport {ParticleEmitterFactory} from \"./particle-factory.js\"\nimport Color from \"color\";\nimport Player from \"./player.js\"\n\nMatter.Resolver._restingThresh = 0.1 // solving bug: https://github.com/liabru/matter-js/issues/394\nMatter.Resolver._restingThreshTangent = 1\n\nconsole.clear();\n// matter-tools by liabru https://github.com/liabru/matter-tools\n\nvar Engine = Matter.Engine,\n  Render = Matter.Render,\n  Runner = Matter.Runner,\n  Composites = Matter.Composites,\n  Composite = Matter.Composite,\n  Common = Matter.Common,\n  World = Matter.World,\n  Bodies = Matter.Bodies,\n  Grid = Matter.Grid,\n  MouseConstraint = Matter.MouseConstraint,\n  Mouse = Matter.Mouse,\n  Body = Matter.Body,\n  Events = Matter.Events;\n\nwindow.H = 600;\nwindow.W = 800;\n\nexport class Env {\n  constructor(game_data_callback){\n      this.game_data_callback = game_data_callback\n  }\n\n  setup(element_id) {\n    // create engine\n    this.engine = Engine.create({velocityIterations: 8});\n    this.engine.gravity.scale = 0;\n    this.world = this.engine.world;\n\n    this.particle_factory = new ParticleEmitterFactory(this);\n\n    // create renderer\n    var render = Render.create({\n      element: document.getElementById(element_id),\n      engine: this.engine,\n      options: {\n        width: 800,\n        height: 600,\n        showAngleIndicator: true,\n        // showBroadphase: false,\n        showDebug: false,\n        wireframes: false\n      }\n    });\n    this.render = render;\n\n    Render.run(render);\n\n    // create runner\n    var runner = Runner.create();\n\n    this.build_play_field();\n    this.add_mouse_control();\n\n    this.build_players();\n\n\n    this.register_events();\n\n    Runner.run(runner, this.engine);\n\n    // fit the render viewport to the scene\n    Render.lookAt(render, {\n      min: { x: 0, y: 0 },\n      max: { x: 800, y: 600 }\n    });\n    this.update_game_data()\n  }\n\n  add_mouse_control() {\n    var mouse = Mouse.create(this.render.canvas),\n      mouseConstraint = MouseConstraint.create(this.engine, {\n        mouse: mouse,\n        constraint: {\n          stiffness: 0.2,\n          render: {\n            visible: true\n          }\n        }\n      });\n\n    Composite.add(this.world, mouseConstraint);\n    // keep the mouse in sync with rendering\n    this.render.mouse = mouse;\n  }\n\n  stop() {\n    Matter.Render.stop(this.render);\n    Matter.Runner.stop(this.runner);\n  }\n\n  build_players(data) {\n    let margin = 20, play_area = 100;\n    var p1 = new Player(0 + play_area + margin, window.H / 2, this);\n    var p2 = new Player(window.W - (play_area + margin), window.H / 2, this);\n    Composite.add(this.world, p1.shape);\n    Composite.add(this.world, p2.shape);\n    this.players = [p1, p2];\n    this.players.map((p) => p.build_emitter());\n  }\n\n  build_play_field() {\n    // add bodies\n    let opts = { isStatic: true} //, friction:0, restituition:1, frictionStatic:0, inertia: 10000};\n    Composite.add(this.world, [\n      // walls\n      Bodies.rectangle(400, 0, 800, 100, opts),\n      Bodies.rectangle(400, 600, 800, 100, opts),\n      Bodies.rectangle(800, 300, 100, 600, opts),\n      Bodies.rectangle(0, 300, 100, 600, opts)\n    ]);\n  }\n\n    update_game_data() {\n        if (!this.game_data_callback) return\n        let game_data = this.players.map(p => {return {\n            health: p.health, died_at: p.died_at || null, damage_dealt: p.damage_dealt\n        }})\n        this.game_data_callback(game_data)\n    }\n  register_events() {\n    const env = this\n    Events.on(this.engine, \"collisionStart\", function (e) { // cant seem to register event on players object themselves TODO: check this later\n      var pairs = e.pairs;\n      pairs = pairs.filter((el, _) => {\n        return el.bodyA.is_player || el.bodyB.is_player;\n      });\n\n      // change object colours to show those starting a collision\n      for (var i = 0; i < pairs.length; i++) {\n        let pair = pairs[i];\n        let player = pair.bodyA.is_player ? pair.bodyA : pair.bodyB;\n        let other = !pair.bodyA.is_player ? pair.bodyA : pair.bodyB;\n        player = player.player;\n        if (other.isParticle){\n            Composite.remove(this.world, other)\n            explode(other.position, env.particle_factory)\n        }\n        let damage_dealt = player.take_damage(51);\n        if (other.owner === undefined){\n            //debugger\n        }\n        other.owner.damage_dealt += damage_dealt\n        env.update_game_data()\n      }\n    });\n  }\n\n\n    title = \"Env\";\n    for = \">=0.14.2\";\n}\n\nfunction explode(position, particle_factory) {\n    let emitter = particle_factory.create(\n            position.x,\n            position.y,\n            {collisions: false, amount: 40, amountPerTick:10, interval: 1, collisionFilter:{group: -1}}\n    );\n    emitter.start();\n}\n\n\n//window.restart()\n","import BTable from 'react-bootstrap/Table'\nimport {useTable} from 'react-table'\nimport {useMemo} from 'react'\n\nconst game_data_columns = [\n    { Header: 'Health', accessor: 'game.health', },\n    { Header: 'Died at', accessor: 'game.died_at', },\n    { Header: 'Damage Dealt', accessor: 'game.damage_dealt', },\n]\n\nexport function Table(props) {\n    let stats = [...props.stats]\n\n    let columns = useMemo( () => {\n        const columns_copy = [...props.columns] // this is needed to prevent a bug where columns vanish, needs further investigation as to why\n        if (props.columns === undefined) return []\n        return [columns_copy[0], ...game_data_columns, ...columns_copy.splice(1) ]\n    }, [props.columns])\n\n    for (var i=0; i < props.stats.length; i++) {\n        if(props.game_data[i] === undefined) continue\n        stats[i].game = {...props.game_data[i]}\n        if(stats[i].game.died_at !== null)\n            stats[i].game.died_at = ((stats[i].game.died_at - props.start_time)/1000).toFixed(1) + 's'\n    }\n\n    //return <div><p>{JSON.stringify(stats)}</p><p>{JSON.stringify(columns)}</p></div>\n    // return (<BTable>\n    //         <thead>{JSON.stringify(stats)}\n    //     <tr {...columns}/></thead></BTable>)\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow\n    } = useTable({columns: columns, data: stats})\n\n   return (\n     <BTable {...getTableProps()} striped bordered hover >\n       <thead>\n         {headerGroups.map(headerGroup => (\n           <tr {...headerGroup.getHeaderGroupProps()}>\n             {headerGroup.headers.map(column => (\n               <th {...column.getHeaderProps()} >\n                 {column.render('Header')}\n               </th>\n             ))}\n           </tr>\n         ))}\n       </thead>\n       <tbody {...getTableBodyProps()}>\n         {rows.map(row => {\n           prepareRow(row)\n           return (\n             <tr {...row.getRowProps()}>\n               {row.cells.map(cell => {\n                 return (\n                   <td\n                     {...cell.getCellProps()}\n                   >\n                     {cell.render('Cell')}\n                   </td>\n                 )\n               })}\n             </tr>\n           )\n         })}\n       </tbody>\n     </BTable>\n   )\n}\n","import './App.css';\nimport * as Env from './env.js'\nimport {React, useEffect} from 'react'\nimport {useState} from 'react'\nimport {Table} from './table.js'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button'\n\n\nwindow.env = new Env.Env()\n\nconst stats = [ { name: 'Team1', goals: 2 }, { name: 'Team2', goals: 5 }, ]\nconst columns = [\n    { Header: 'Nome | Player', accessor: 'name', },\n    { Header: 'Gols | Max Health', accessor: 'goals', },\n]\n\nconst game_init_data = stats\n\nfunction App() {\n    let [game_data, set_game_data_state] = useState([]);\n    let [start_time, set_start_time] = useState(new Date());\n    window.env.game_data_callback = set_game_data_state\n\n\n    function restart() {\n        window.env = new Env.Env(set_game_data_state)\n        window.document.getElementById(\"canvas\").innerHTML = \"\"\n        window.env.setup(\"canvas\", game_init_data);\n        set_start_time(new Date())\n    }\n\n    useEffect(() => {\n        window.document.getElementById(\"canvas\").innerHTML = \"\"\n        window.env.setup(\"canvas\", game_init_data);\n    }, [])\n\n\n    return (\n        <div className=\"App\">\n            <Button onClick={restart}> RESTART </Button>\n            <Table stats={stats} columns={columns} game_data={game_data} start_time={start_time}/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}