{"version":3,"sources":["particle-factory.ts","player.ts","env.ts","Table.tsx","stats.ts","App.tsx","reportWebVitals.js","index.js"],"names":["ParticleEmitterFactory","env","undefined","particle_factory","Error","this","x","y","opts","Emitter","owner","options","particlesAdded","pos","running","defaults","collisions","isStatic","size","min","max","amount","interval","velocity","direction","colors","delay","frictionAir","parent","collisionFilter","amountPerTick","decaySpeed","dir","toLowerCase","e","requestAnimationFrame","addParticle","duplicated","emitter","posX","posY","engine","timing","timeScale","pSize","vel","number","interactive","numParticles","position","label","angle","Math","random","PI","dist","circleRadius","cos","sin","bounds","name","color","round","length","r","g","b","particle_opts","friction","frictionStatic","inertia","particle","Bodies","polygon","isSensor","density","restitution","restituition","render","fillStyle","isParticle","particles","Composite","add","world","velX","velY","Boolean","Body","setVelocity","scale","decreaseScale","remove","setTimeout","waitForInterval","framesPast","runner","fps","i","window","innerWidth","innerHeight","pallete","split","map","Color","Player","max_health","damage_per_ball","shape","health","died_at","damage_dealt","idx","original_color","_build_shape","string","strokeStyle","lineWidth","collision_filter","rectangle","player","category","mask","group","Infinity","create","start","damage","die","health_percentage","alpha","console","log","stop","Date","Matter","Resolver","_restingThresh","_restingThreshTangent","clear","H","W","Env","game_state_callback","players","title","for","Engine","velocityIterations","gravity","element_id","player_stats","Render","element","document","getElementById","width","height","wireframes","showDebug","showAngleIndicator","run","Runner","build_play_field","add_mouse_control","build_players","update_game_state","register_events","lookAt","mouse","Mouse","canvas","mouseConstraint","MouseConstraint","constraint","stiffness","visible","n","player_coords","get_player_coords","forEach","p_stats","p","push","build_emitter","game_state","Events","on","pairs","filter","el","_","bodyA","bodyB","pair","player_shape","other_shape","explode","take_damage","game_state_columns","Header","accessor","attribute_labels","mount_columns","attributes","stats_to_attributes","multipliers","Object","entries","attribute","stat","multiplier","k","Table","stats","start_time","all_columns","useMemo","columns","splice","final_data","rank","arr","sorted","Set","sort","a","Map","get","_rank_duplicate","clone","game","died_at_string","toFixed","mount_final_data","useTable","data","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","striped","bordered","hover","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","row","getRowProps","cells","cell","getCellProps","Normalizer","col","target","mean","log10","adjusts","errors","adjust","abs","argMin","column_names","mul","compareFn","array","reduce","team","goals","victories","converted_player","to","from","out","normalizer","df","dfd","normalize_stat","values","keys","vals","rv","zip_key_vals","normalize","transform_stats_in_attributes","App","useState","set_game_state","set_start_time","useEffect","innerHTML","setup","className","Button","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.732d3d92.chunk.js","sourcesContent":["/* eslint no-unused-vars: \"off\" */\nimport { Bodies, Body, Composite,} from 'matter-js'\nimport { Env } from './env'\nimport Player from './player'\n\ndeclare module 'matter-js' {\n  interface Body {\n    isParticle: boolean\n    decaySpeed: number\n  }\n  interface Runner {\n    fps: any\n  }\n}\n\n\nexport class ParticleEmitterFactory {\n    env: Env\n\n    constructor(env: Env) {\n        if(env.particle_factory !== undefined) { throw new Error(\"Only one factory per env\")}\n        this.env = env\n    }\n    create(x, y, opts) {\n        return new Emitter(x, y, {env: this.env, ...opts})\n    }\n}\n\nexport class Emitter{\n    static numParticles = 0;\n    env: Env\n    particlesAdded: number\n    pos: {x, y}\n    options: any \n    running: boolean\n    owner: Player\n\n    constructor(x, y, {owner, env, ...options}) {\n        this.env = env\n        this.particlesAdded = 0;\n        let defaults = Emitter.defaults;\n        //Reset options to defaults\n        // let options = (...defaults, ...options)\n        if (options === undefined) {\n            options = defaults;\n        }\n        if (options.collisions === undefined) {\n            options.collisions = defaults.collisions;\n        }\n        if (options.isStatic === undefined) {\n            options.isStatic = defaults.isStatic;\n        }\n        if (options.size === undefined) {\n            options.size = defaults.size;\n        } else if (typeof options.size === \"number\") {\n            options.size = {\n                min: options.size,\n                max: options.size\n            };\n        }\n        if (options.amount === undefined) {\n            options.amount = defaults.amount;\n        }\n        if (options.interval === undefined) {\n            options.interval = defaults.interval;\n        }\n        if (options.velocity === undefined) {\n            options.velocity = defaults.velocity;\n        }\n        if (options.velocity.direction === undefined) {\n            options.velocity.direction = defaults.velocity.direction;\n        } else if (options.velocity.direction.x === undefined) {\n            options.velocity.direction.x = defaults.velocity.direction.x;\n        } else if (options.velocity.direction.y === undefined) {\n            options.velocity.direction.y = defaults.velocity.direction.y;\n        }\n        if (options.colors === undefined) {\n            options.colors = defaults.colors;\n        } else if (typeof options.colors === \"string\") {\n            options.colors = [options.colors];\n        }\n        if (options.delay === undefined) {\n            options.delay = defaults.delay;\n        }\n        if (options.frictionAir === undefined) {\n            options.frictionAir = defaults.frictionAir;\n        }\n        if (options.parent === undefined) {\n            options.parent = defaults.parent;\n        }\n        if (options.collisionFilter === undefined) {\n            options.collisionFilter = defaults.collisionFilter;\n        }\n        if (options.amountPerTick === undefined || options.amountPerTick < 1) {\n            options.amountPerTick = defaults.amountPerTick;\n        }\n        if (options.decaySpeed === undefined) {\n            options.decaySpeed = defaults.decaySpeed;\n        }\n        if (options.decaySpeed < 0) {\n            options.decaySpeed = 0;\n        }\n        if (options.decaySpeed > 1) {\n            options.decaySpeed = 1;\n        }\n\n        options.collisions = options.collisions ? false : true;\n\n        //Reset x/y to defaults\n        if (x === undefined) {\n            x = defaults.x;\n        }\n        if (y === undefined) {\n            y = defaults.y;\n        }\n\n        //Change velocity.direction\n        let dir = options.velocity.direction;\n        if (typeof dir.y === \"string\") {\n            dir.y = dir.y.toLowerCase();\n            if (dir.y === \"up\") {\n                options.velocity.direction.y = -1;\n            } else if (dir.y === \"down\") {\n                options.velocity.direction.y = 1;\n            } else if (dir.y === \"none\") {\n                options.velocity.direction.y = 0;\n            }\n        }\n        if (typeof dir.x === \"string\") {\n            dir.x = dir.x.toLowerCase();\n            if (dir.x === \"left\") {\n                options.velocity.direction.x = -1;\n            } else if (dir.x === \"right\") {\n                options.velocity.direction.x = 1;\n            } else if (dir.x === \"none\") {\n                options.velocity.direction.x = 0;\n            }\n        }\n\n        this.pos = { x: x, y: y }\n        this.options = options\n        this.running = false\n        this.owner = owner\n    }\n    stop() {\n        let e = this;\n        let amount = this.options.amount;\n        this.options.amount = 0;\n        this.running = false;\n        requestAnimationFrame(function() {\n            requestAnimationFrame(function() {\n                e.options.amount = amount;\n            });\n        });\n    }\n    start() {\n        this.running = true\n        this.particlesAdded = 0;\n        this.addParticle();\n    }\n    addParticle(duplicated=false) { // debug / rewrite this\n        let emitter = this\n        let pos = this.pos;\n        let posX = pos.x;\n        let posY = pos.y;\n        let options = this.options;\n        let delay = options.delay / this.env.engine.timing.timeScale;\n        let pSize = options.size;\n        let colors = options.colors;\n        let vel = options.velocity;\n        let number = options.amount;\n        let interval = options.interval;\n        let interactive = options.collisions;\n        let frictionAir = options.frictionAir;\n        let direction = options.velocity.direction;\n        let collisionFilter = options.collisionFilter;\n        let amountPerTick = options.amountPerTick;\n\n        Emitter.numParticles++;\n        this.particlesAdded++;\n\n        if (this.options.parent !== undefined) {\n            let parent = this.options.parent;\n            pos = parent.position;\n            this.pos = pos;\n\n            if (parent.label === \"Circle Body\") {\n                let angle = Math.random() * Math.PI * 2;\n                let dist = Math.random() * parent.circleRadius;\n\n                posX = dist * Math.cos(angle) + posX;\n                posY = dist * Math.sin(angle) + posY;\n            } else if (parent.label === \"Rectangle Body\") {\n                posX =\n                    Math.random() * (parent.bounds.max.x - parent.bounds.min.x) +\n                    parent.bounds.min.x;\n                posY =\n                    Math.random() * (parent.bounds.max.y - parent.bounds.min.y) +\n                    parent.bounds.min.y;\n            }\n        }\n\n        let name = \"particle\" + Emitter.numParticles;\n        let size = random(pSize.min, pSize.max);\n        let color = colors[Math.round(random(colors.length))];\n        color = color !== undefined ? color : colors[0];\n\n        if (color === \"random\") {\n            let r = random(0, 255);\n            let g = random(0, 255);\n            let b = random(0, 255);\n            color = \"rgb(\" + r + \", \" + g + \", \" + b + \")\";\n        }\n\n        let particle_opts = (({\n            friction,\n            frictionStatic,\n            inertia\n        }) => ({\n            friction,\n            frictionStatic,\n            inertia\n        }))(this.options);\n        let particle = Bodies.polygon(posX, posY, 6, size, {\n            isSensor: interactive,\n            isStatic: this.options.isStatic,\n            density: 1,\n            restitution: this.options.restituition,\n            frictionAir: frictionAir,\n            render: {\n                fillStyle: color\n            },\n            ...particle_opts\n        });\n        particle.decaySpeed = options.decaySpeed\n        particle.isParticle = true\n        particle.owner = this.owner\n        this.env.particles[name] = particle\n\n        Composite.add(this.env.world, particle);\n\n        if (collisionFilter !== undefined) {\n            particle.collisionFilter = collisionFilter;\n        }\n\n        let velX = random(0, vel.x);\n        let velY = random(0, vel.y);\n\n        if (vel.y === undefined) {\n            velY = random(0, 2);\n        }\n        if (vel.x === undefined) {\n            velX = random(0, 2);\n        }\n\n        if (direction.x === undefined || direction.x === 0) {\n            velX = Boolean(Math.round(random())) ? velX : velX * -1;\n        } else {\n            velX *= direction.x;\n        }\n\n        if (direction.y === undefined || direction.y === 0) {\n            velY = Boolean(Math.round(random())) ? velY : velY * -1;\n        } else {\n            velY *= direction.y;\n        }\n        Body.setVelocity(particle, {\n            x: velX,\n            y: velY\n        });\n\n        let scale = 1;\n\n        function decreaseScale() {\n            scale -= options.decaySpeed * emitter.env.engine.timing.timeScale;\n            particle.circleRadius = size * scale;\n            if (particle.circleRadius > options.decaySpeed) {\n                requestAnimationFrame(decreaseScale);\n            } else {\n                Composite.remove(emitter.env.world, particle);\n            }\n        }\n        setTimeout(decreaseScale, delay);\n\n        if (this.particlesAdded < number && !duplicated) {\n            if (interval > 0) {\n                let framesPast = 0;\n                function waitForInterval() {\n                    if (emitter.options.amount > 0) {\n                        framesPast += emitter.env.engine.timing.timeScale;\n                        if (emitter.env.runner !== undefined && emitter.env.runner.fps !== undefined) {\n                            if (framesPast >= interval / (1000 / emitter.env.runner.fps)) {\n                                if (amountPerTick > 1) {\n                                    for (let i = amountPerTick; i--;) {\n                                        if (i !== 0) {\n                                            emitter.addParticle(true);\n                                        } else {\n                                            emitter.addParticle();\n                                        }\n                                    }\n                                } else {\n                                    //here\n                                    emitter.addParticle();\n                                }\n                            } else {\n                                requestAnimationFrame(waitForInterval);\n                            }\n                        } else {\n                            if (\n                                framesPast >=\n                                interval / 16.67 / emitter.env.engine.timing.timeScale\n                            ) {\n                                for (let i = amountPerTick; i--;) {\n                                    if (i !== 0) {\n                                        emitter.addParticle(true);\n                                    } else {\n                                        emitter.addParticle();\n                                    }\n                                }\n                            } else {\n                                requestAnimationFrame(waitForInterval);\n                            }\n                        }\n                    } else {\n                        emitter.running = false;\n                    }\n                }\n                requestAnimationFrame(waitForInterval);\n            } else {\n                emitter.addParticle();\n            }\n        }\n    }\n\n    static defaults = {\n        colors: [\"#FE601C\", \"#EBDB14\", \"#EB471F\", \"#ED7A0E\"],\n        collisions: false,\n        isStatic: false,\n        x: window.innerWidth / 2,\n        y: window.innerHeight / 2,\n        size: {\n            min: 0.5,\n            max: 2\n        },\n        amount: 50,\n        interval: 0,\n        amountPerTick: 1,\n        velocity: {\n            x: 5,\n            y: 5,\n            direction: {\n                x: \"none\",\n                y: \"none\"\n            }\n        },\n        delay: 400,\n        decaySpeed: 0.1,\n        frictionAir: 0.02,\n        parent: undefined,\n        collisionFilter: undefined\n    }\n}\n\nfunction random(min:any=undefined, max:any=undefined) {\n        if (min === undefined && max === undefined) {\n            min = 0;\n            max = 1;\n        } else if (max === undefined) {\n            max = min;\n            min = 0;\n        }\n        return Math.random() * (max - min) + min;\n}\n\n","/* eslint no-unused-vars: \"off\" */\nimport Color from \"color\";\nimport { Bodies, Body, Composite, World } from 'matter-js';\nimport { Env } from \"./env\";\nimport { Emitter } from \"./particle-factory\";\n\nconst pallete = '#F51720 #FA26A0 #F8D210 #2FF3E0'.split(' ').map(x => new Color(x))\n\nexport default class Player {\n    shape: Body\n    health: number\n    max_health: number\n    died_at: Date | null\n    damage_dealt: number\n    idx: number\n    env: Env\n    world: World\n    color: Color\n    original_color: Color\n    emitter! : Emitter\n    name: string\n    damage_per_ball: number\n\n\n  static idx = 0;\n  constructor(x, y, env, {max_health, name, damage_per_ball}) {\n    this.idx = Player.idx++;\n    this.max_health = max_health;\n    this.health = this.max_health;\n    this.env = env;\n    this.world = this.env.world;\n    this.color = pallete[this.idx % pallete.length]\n    this.original_color = pallete[this.idx % pallete.length]\n    this.shape = this._build_shape(x, y);\n    this.damage_per_ball = damage_per_ball\n    this.damage_dealt = 0\n    this.died_at = null\n    this.name = name\n  }\n\n  _build_shape(x, y) {\n    let opts = {\n      isStatic: true,\n      render: {\n        fillStyle: this.color.string(),\n        strokeStyle: \"white\",\n        lineWidth: 3\n      },\n      collisionFilter: this.collision_filter\n    };\n    let shape = Bodies.rectangle(x, y, 30, 30, opts)\n    shape.player = this\n    return shape\n  }\n\n  get collision_filter() {\n    let category = 1 << (this.idx + 1); // +1 because category 1 is the default (walls)\n    let mask = -1 ^ category; // colide with all but yourself\n    return { category: category, mask: mask, group: 0 };\n  }\n\n  build_emitter() {\n    let opts = {\n      amount: Infinity,\n      interval: 1001, // in millis\n      amountPerTick: 1, // batch size\n      size: { min: 5, max: 20 },\n      delay: 1000 * 10,\n      collisions: true,\n      restituition: 1,\n      colors: this.original_color.string(),\n      collisionFilter: this.collision_filter,\n      frictionStatic: 0,\n      frictionAir: 0,\n      friction: 0,\n      decaySpeed: 0.03,\n    };\n    // Composite.add(this.world, Bodies.polygon(300, 300, 10, 50, {restituition: 1, friction:0, frictionAir:0, frictionStatic:0}))\n    // return\n    this.emitter = this.env.particle_factory.create(\n      this.x,\n      this.y,\n      {owner: this, ...opts}\n    );\n    this.emitter.start();\n  }\n\n  get x() {\n    return this.shape.position.x;\n  }\n\n  get y() {\n    return this.shape.position.y;\n  }\n\n  take_damage(damage) {\n    this.health -= damage;\n    if (this.health <= 0) {\n      this.die();\n    }\n    let health_percentage = this.health / this.max_health;\n    this.color = this.color.alpha(health_percentage)\n    this.shape.render.fillStyle = this.color.string();\n    return damage\n  }\n\n  die() {\n    console.log(`Player ${this.idx} DIED`);\n    Composite.remove(this.world, this.shape);\n    this.emitter.stop();\n    this.died_at = new Date()\n  }\n}\n\n","/* eslint no-unused-vars: \"off\" */\nimport Matter, { Bodies, Composite, Engine,\n    Events, Mouse, MouseConstraint, Render, Runner\n} from 'matter-js';\nimport { ParticleEmitterFactory } from \"./particle-factory\";\nimport Player from \"./player\";\n\n// @ts-ignore\nMatter.Resolver._restingThresh = 0.1 // solving bug: https://github.com/liabru/matter-js/issues/394\n// @ts-ignore\nMatter.Resolver._restingThreshTangent = 1\n\n\nconsole.clear();\n// matter-tools by liabru https://github.com/liabru/matter-tools\n\ndeclare global {\n  interface Window {\n      H:any;\n      W:any;\n  }\n}\n\ndeclare module 'matter-js' {\n  interface Body {\n    player: Player\n    owner: Player\n  }\n}\n\nwindow.H = 600;\nwindow.W = 800;\n\n//type FUN = (arg:any) => any\n\nexport class Env {\n    game_state_callback: Function //| undefined\n    engine!: Engine\n    world: any\n    particle_factory!: ParticleEmitterFactory\n    render!: Render\n    runner!: Runner\n    particles: {}\n\n\n    constructor(game_state_callback?){\n        this.particles = {}\n\n        // create engine\n        this.engine = Engine.create({velocityIterations: 8});\n        // @ts-ignore\n        this.engine.gravity.scale = 0;\n        this.world = this.engine.world;\n\n        this.particle_factory = new ParticleEmitterFactory(this);\n        this.game_state_callback = game_state_callback\n    }\n\n    setup(element_id: string, player_stats : Array<Object>) {\n        var render = Render.create({\n            element: document.getElementById(element_id) as HTMLElement,\n            engine: this.engine,\n            options: {\n                width: 800,\n                height: 600,\n                wireframes: false,\n                // @ts-ignore\n                showDebug: false,\n                showAngleIndicator: true,\n            }\n        });\n        this.render = render;\n\n        Render.run(render);\n\n        // create runner\n        this.runner = Runner.create();\n\n        this.build_play_field();\n        this.add_mouse_control();\n\n        this.build_players(player_stats);\n        this.update_game_state()\n\n        this.register_events();\n\n        Runner.run(this.runner, this.engine);\n\n        // fit the render viewport to the scene\n        Render.lookAt(render, {\n            min: { x: 0, y: 0 },\n            max: { x: 800, y: 600 }\n        });\n    }\n\n  add_mouse_control() {\n    var mouse = Mouse.create(this.render.canvas),\n      mouseConstraint = MouseConstraint.create(this.engine, {\n        mouse: mouse,\n        // @ts-ignore\n        constraint: {\n          stiffness: 0.0002,\n          render: {\n            visible: true\n          }\n        }\n      });\n\n    Composite.add(this.world, mouseConstraint as any);\n    // @ts-ignore\n    this.render.mouse = mouse;\n  }\n\n  stop() {\n    Matter.Render.stop(this.render);\n    Matter.Runner.stop(this.runner);\n  }\n\n  players!: Array<Player>\n\n\n  get_player_coords(n: 2) {\n    if(n!==2) throw new Error('only 2 players supported')\n    let margin = 21, play_area = 100;\n    return [\n        [0 + play_area + margin, window.H/2],\n        [window.W - (play_area + margin), window.H/2],\n    ]\n  }\n  build_players(player_stats) {\n    this.players = []\n    const player_coords = this.get_player_coords(player_stats.length)\n    player_stats.forEach( (p_stats, idx) => {\n        let [x, y] = player_coords[idx]\n        let p = new Player(x, y, this, p_stats);\n        this.players.push(p)\n        Composite.add(this.world, p.shape);\n    })\n    this.players.map((p) => p.build_emitter());\n  }\n\n  build_play_field() {\n    // add bodies\n    let opts = { isStatic: true} //, friction:0, restituition:1, frictionStatic:0, inertia: 10000};\n    // @ts-ignore\n    Composite.add(this.world, [ // walls\n      Bodies.rectangle(400, 0, 800, 100, opts),\n      Bodies.rectangle(400, 600, 800, 100, opts),\n      Bodies.rectangle(800, 300, 100, 600, opts),\n      Bodies.rectangle(0, 300, 100, 600, opts)\n    ]);\n  }\n\n    update_game_state() {\n        if (!this.game_state_callback) return\n        let game_state = this.players.map(p => {return {\n            health: p.health, died_at: p.died_at || null, damage_dealt: p.damage_dealt\n        }})\n        setTimeout(() => this.game_state_callback(game_state), 0)\n    }\n    register_events() {\n        const env = this\n        Events.on(this.engine, \"collisionStart\", function (e) { // cant seem to register event on players object themselves TODO: check this later\n          var pairs = e.pairs;\n          pairs = pairs.filter((el, _) => {\n            return el.bodyA.player || el.bodyB.player;\n          });\n\n          // change object colours to show those starting a collision\n          for (var i = 0; i < pairs.length; i++) {\n            let pair = pairs[i];\n            let player_shape = pair.bodyA.player ? pair.bodyA : pair.bodyB;\n            let other_shape = !pair.bodyA.player ? pair.bodyA : pair.bodyB;\n            let player = player_shape.player;\n            if (other_shape.isParticle){\n                Composite.remove(env.world, other_shape)\n                explode(other_shape.position, env.particle_factory)\n            }\n            let damage = other_shape.owner.damage_per_ball\n            player.take_damage(damage);\n            if (other_shape.owner === undefined){\n                debugger\n            }\n            other_shape.owner.damage_dealt += damage\n            env.update_game_state()\n          }\n        });\n    }\n\n\n    title = \"Env\";\n    for = \">=0.14.2\";\n}\n\nfunction explode(position, particle_factory) {\n    let emitter = particle_factory.create(\n            position.x,\n            position.y,\n            {collisions: false, amount: 40, amountPerTick:10, interval: 1, collisionFilter:{group: -1}}\n    );\n    emitter.start();\n}\n\n\n//window.restart()\n","import BTable from 'react-bootstrap/Table'\nimport {useTable} from 'react-table'\nimport {useMemo} from 'react'\nimport {Attributes} from './App'\nimport clone from 'just-clone'\n\nconst game_state_columns = [\n    { Header: 'Health', accessor: 'game.health', },\n    { Header: 'Died at', accessor: 'game.died_at_string', },\n    { Header: 'Rank', accessor: 'game.rank', },\n    { Header: 'Damage Dealt', accessor: 'game.damage_dealt', },\n]\nconst attribute_labels = {\n    max_health: 'Max Health',\n    name: 'Player Name',\n    damage_per_ball: 'Damage per Ball'\n}\n\nfunction mount_column(attribute, stat, multiplier ): {Header: string, accessor: string} {\n    return {\n        Header: `${attribute_labels[attribute]} = ${stat} ${multiplier ? ` x ` + multiplier : ''}`,\n        accessor: attribute\n    }\n}\nfunction mount_columns(attributes: Attributes, stats_to_attributes, multipliers) {\n    return Object.entries(stats_to_attributes).map(([k, _]) => {\n        return mount_column(k, stats_to_attributes[k], multipliers[k])\n    })\n}\n\nexport function Table({stats, attributes, stats_to_attributes, game_state,\n        start_time, multipliers}) {\n    let all_columns = useMemo( () => {\n        const columns = mount_columns(attributes, stats_to_attributes, multipliers)\n        return [columns[0], ...game_state_columns, ...columns.splice(1) ] // putting name first\n    }, [attributes, multipliers, stats_to_attributes])\n\n    let final_data = mount_final_data(game_state, attributes, start_time)\n\n    //return <div><p>{JSON.stringify(stats)}</p><p>{JSON.stringify(columns)}</p></div>\n    // return (<BTable>\n    //         <thead>{JSON.stringify(stats)}\n    //     <tr {...columns}/></thead></BTable>)\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow\n    } = useTable({columns: all_columns, data: final_data})\n\n   return (\n     <BTable {...getTableProps()} striped bordered hover >\n       <thead>\n         {headerGroups.map(headerGroup => (\n           <tr {...headerGroup.getHeaderGroupProps()}>\n             {headerGroup.headers.map(column => (\n               <th {...column.getHeaderProps()} >\n                 {column.render('Header')}\n               </th>\n             ))}\n           </tr>\n         ))}\n       </thead>\n       <tbody {...getTableBodyProps()}>\n         {rows.map(row => {\n           prepareRow(row)\n           return (\n             <tr {...row.getRowProps()}>\n               {row.cells.map(cell => {\n                 return (\n                   <td\n                     {...cell.getCellProps()}\n                   >\n                     {cell.render('Cell')}\n                   </td>\n                 )\n               })}\n             </tr>\n           )\n         })}\n       </tbody>\n     </BTable>\n   )\n}\n\nfunction mount_final_data(game_state, attributes, start_time){\n    if(game_state === null) {// game hasn't started\n        return attributes\n    }\n\n    let rank = _rank_duplicate(game_state.map((x: { died_at: number } ) => x.died_at !== null ? -x.died_at : 0))\n\n    let final_data = clone(attributes)\n    for (var i=0; i < final_data.length; i++) {\n        final_data[i].game = {...game_state[i]}\n        if(final_data[i].game.died_at !== null)\n            final_data[i].game.died_at_string = ((final_data[i].game.died_at - start_time)/1000).toFixed(1) + 's'\n        if(rank !== null)\n            final_data[i].game.rank = rank[i]\n    }\n    return final_data\n\n}\n\n\nfunction _rank_duplicate(arr: number[]) {\n    const sorted = [...new Set(arr)].sort((a: number, b: number) => b - a);\n    const rank = new Map(sorted.map((x, i) => [x, i + 1]));\n    return arr.map((x) => rank.get(x) as number);\n}","import * as dfd from \"danfojs/src/index\"\nimport {Attributes} from './App'\n\nexport class Normalizer {\n    multipliers : {[key: string]: number} = {}\n    normalize_stat(col, target) : dfd.Series {\n        let mean = col.mean()\n        let multiplier = 10 ** Math.round(Math.log10(target / mean))\n        let adjusts = [0.2, 0.5, 1, 2, 5]\n        let errors = adjusts.map( (adjust) => \n            Math.abs(target - (mean * multiplier * adjust))) // to think: treat errors in log?\n        //if(target === 33) { debugger}\n        multiplier *= adjusts[argMin(errors)]\n        this.multipliers[col.column_names] = multiplier\n        return col.mul(multiplier)\n    }\n}\n\nexport function transform_stats_in_attributes(stats : Object[], stats_to_attributes: Object) : [Attributes, {[key: string]: number}] {\n    let attributes : Object[] = []\n    for (let player of stats){\n        let converted_player = {}\n        for (let to in stats_to_attributes){\n            let from = stats_to_attributes[to]\n            converted_player[to] = player[from]\n        }\n        attributes.push(converted_player)\n    }\n    return normalize(attributes)\n}\nfunction normalize(attributes) : [Attributes, {[key: string]: number}] {\n    let normalizer = new Normalizer()\n    let df = new dfd.DataFrame(attributes)\n    // @ts-ignore\n    window.df = df\n    let out\n    out = {\n        damage_per_ball: normalizer.normalize_stat(df.damage_per_ball, 20)\n        ,max_health: normalizer.normalize_stat(df.max_health, 100)\n        ,name: df.name\n    }\n    for(let k in out) {out[k] = out[k].values}\n    out = (new dfd.DataFrame(out))\n    let columns = out.columns\n    out = out.values //array of arrays\n    out = out.map(row => zip_key_vals(columns, row))\n    return [out as Attributes, normalizer.multipliers]\n}\n\nfunction zip_key_vals(keys, vals) {\n  var rv = {};\n  for (var i = 0; i < keys.length; ++i)\n    rv[keys[i]] = vals[i];\n  return rv;\n}\n\n\n\n\nconst argFact = (compareFn) => (array) => array.map((el, idx) => [el, idx]).reduce(compareFn)[1]\n//const argMax = argFact((min, el) => (el[0] > min[0] ? el : min))\nconst argMin = argFact((max, el) => (el[0] < max[0] ? el : max))","import './App.css';\nimport * as Env from './env'\nimport React, {useEffect} from 'react'\nimport {useState} from 'react'\nimport {Table} from './Table'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button'\n\nimport {transform_stats_in_attributes} from \"./stats\"\n\n/*\n* stats: real life stats\n* attributes: game initial attributes \n* game_state: game current state\n*/\ntype _StringKeyObject = {[key: string]: any}\ntype Stat = _StringKeyObject\nexport type Stats = Stat[]\nexport type Attributes = _StringKeyObject[]\n// type GameState = _StringKeyObject\n\n\ndeclare global { interface Window {\n    env: Env.Env\n} }\n\nwindow.env = new Env.Env()\n\nconst stats: Stats = [\n    { team: 'Vasco', goals: 52, victories: 22 },\n    { team: 'Botafogo', goals: 65, victories: 22},\n]\n \nconst stats_to_attributes = {\n    name: 'team',\n    max_health: 'goals',\n    damage_per_ball: 'victories'\n}\n\n\nconst [attributes, multipliers]: [Attributes, {[key: string]: number}] = transform_stats_in_attributes(stats, stats_to_attributes)\n\nfunction App() {\n    let [game_state, set_game_state] = useState(null);\n    let [start_time, set_start_time] = useState(new Date());\n    window.env.game_state_callback = set_game_state\n\n\n    function restart() {\n        window.env = new Env.Env(set_game_state)\n        window.document.getElementById(\"canvas\")!.innerHTML = \"\"\n        window.env.setup(\"canvas\", attributes);\n        set_start_time(new Date())\n    }\n\n    useEffect(() => {\n        window.document.getElementById(\"canvas\")!.innerHTML = \"\"\n        window.env.setup(\"canvas\", attributes);\n    }, [])\n\n\n    return (\n        <div className=\"App\">\n            <Button onClick={restart}> RESTART </Button>\n            <Table stats={stats} attributes={attributes} \n                    stats_to_attributes={stats_to_attributes}\n                    game_state={game_state} start_time={start_time}\n                    multipliers={multipliers} \n            />\n        </div>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}