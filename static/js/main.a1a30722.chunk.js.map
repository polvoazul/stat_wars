{"version":3,"sources":["Debugger.tsx","StatLoader.tsx","stats.ts","DataTable.tsx","StatSelector.tsx","Table.tsx","particle-factory.ts","player.ts","env.ts","Game.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["Debugger","env","damage_to","player","damage","players","take_damage","update_game_state","className","onClick","json","require","columns","Object","fromEntries","keys","map","k","name","params","split","out","undefined","x","bigger_is_better","JSON","parse","data","obj","fun","v","entries","stats_with_metadata","dfd","Normalizer","multipliers","col","target","mean","multiplier","Math","round","log10","adjusts","errors","adjust","abs","argMin","this","column_names","n_decimals","floor","mul","transform_stats_in_attributes","stats","stats_to_attributes","attributes","converted_player","to","from","Error","stringify","push","normalizer","df","window","damage_per_ball","normalize_stat","max_health","balls_per_second","values","row","zip_key_vals","normalize","vals","rv","i","length","compareFn","max","el","array","idx","reduce","DataTable","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","striped","bordered","hover","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","getRowProps","cells","cell","getCellProps","StatSelector","all_stats","filtered_stats","set_filtered_stats","is_simulating","set_is_simulating","select","useRef","teams","value","label","ano_campeonato","time","update_parent_state","current","p","c","Header","accessor","style","maxWidth","ref","isMulti","isDisabled","onChange","e","Array","options","Button","overflowY","game_state_columns","Cell","GameStateCell","mount_columns","attribute","stat","multiplier_str","toPrecision","attribute_label","attribute_labels","mount_column","Table","game_state","start_time","all_columns","useMemo","splice","final_data","rank","arr","sorted","Set","sort","a","b","Map","get","_rank_duplicate","died_at","getTime","Infinity","clone","game","died_at_string","toFixed","mount_final_data","div","old_v","useEffect","setTimeout","ParticleEmitterFactory","particle_factory","y","opts","Emitter","owner","particlesAdded","pos","running","defaults","collisions","isStatic","size","min","amount","interval","velocity","direction","colors","delay","frictionAir","parent","collisionFilter","amountPerTick","decaySpeed","dir","toLowerCase","requestAnimationFrame","addParticle","duplicated","emitter","posX","posY","engine","timing","timeScale","pSize","vel","number","interactive","numParticles","position","angle","random","PI","dist","circleRadius","cos","sin","bounds","color","r","g","particle_opts","friction","frictionStatic","inertia","particle","Bodies","polygon","isSensor","density","restitution","restituition","fillStyle","isParticle","particles","Composite","add","world","velX","velY","Boolean","Body","setVelocity","scale","decreaseScale","remove","waitForInterval","framesPast","runner","fps","innerWidth","innerHeight","pallete","Color","Player","shape","health","damage_dealt","original_color","_build_shape","string","strokeStyle","lineWidth","collision_filter","rectangle","category","mask","group","create","start","die","health_percentage","alpha","console","log","stop","Date","Matter","Resolver","_restingThresh","_restingThreshTangent","clear","Env","game_state_callback","H","W","walls","title","for","Engine","velocityIterations","gravity","element_id","player_stats","Render","element","document","getElementById","width","height","wireframes","showDebug","showAngleIndicator","run","Runner","add_mouse_control","build_players","register_events","lookAt","mouse","Mouse","canvas","mouseConstraint","MouseConstraint","constraint","stiffness","visible","Events","on","event","mousePosition","n","0","1","max_idx","max_mag","mag","Vector","magnitudeSquared","sub","find_largest_line","vertices","v0","v1","perp","normalise","middle","mult","build_play_field","forEach","p_stats","get_player_coords","build_emitter","n_players","radius","smaller","bigger","ip1","sides","fromVertices","offset","translate","pairs","filter","_","bodyA","bodyB","pair","player_shape","other_shape","explode","Game","useState","set_game_state","set_start_time","rebuild_canvas","destroy","id","innerHTML","setup","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.a1a30722.chunk.js","sourcesContent":["import { Env } from \"./env\"\n\nexport default function Debugger({env}: {env: Env}) {\n    function damage_to(player, damage) {\n        env.players[player].take_damage(damage)\n        env.update_game_state()\n    }\n    return (\n        <div>\n            <h1>DEBUG MODE ON!</h1>\n            <div>\n            <button className=\"btn btn-danger\" onClick={() => damage_to(0, 20)}> Damage p0 </button>\n            <button className=\"btn btn-danger\" onClick={() => damage_to(1, 20)}> Damage p1 </button>\n            </div>\n        </div>\n    )\n}","// import {Stats} from './App'\nimport * as dfd from \"danfojs/src/index\"\n\nfunction obj_map(obj, fun) {\n    return Object.fromEntries(Object.entries(obj).map(fun))\n}\n\nlet json = require(\"./brasileirao_stats.json\");\nlet columns = Object.fromEntries(Object.keys(json[0]).map(k => {\n    let name, params\n    [name, ...params] = k.split('|')\n    let out = {name: name}\n    params = Object.fromEntries(params.map(x=>x.split('=')))\n    if(params.bigger_is_better !== undefined)\n        params.bigger_is_better = JSON.parse(params.bigger_is_better)\n    return [k, {...out, ...params}]\n})\n)\n\nlet data = json.map(player => obj_map(player, ([k, v]) => [columns[k].name, v]))\ndata = new dfd.DataFrame(data)\n\nvar stats_with_metadata = {data: data, columns: columns}\n// var stats: Stats = [\n//     { team: 'Vasco', goals: 52, victories: 22 },\n//     { team: 'Botafogo', goals: 65, victories: 22},\n// ]\n\nexport default stats_with_metadata","import * as dfd from \"danfojs/src/index\"\nimport {Attributes} from './App'\n\nexport class Normalizer {\n    multipliers : {[key: string]: number} = {}\n    normalize_stat(col: dfd.Series, target) : dfd.Series {\n        let mean = col.mean()\n        let multiplier = 10 ** Math.round(Math.log10(target / mean))\n        let adjusts = [0.2, 0.5, 1, 2, 5]\n        let errors = adjusts.map( (adjust) => \n            Math.abs(target - (mean * multiplier * adjust))) // to think: treat errors in log?\n        //if(target === 33) { debugger}\n        multiplier *= adjusts[argMin(errors)]\n        this.multipliers[col.column_names] = multiplier\n        const n_decimals = 2 - Math.floor(Math.log10(target)) + 1 //TODO: test this better \n        return col.mul(multiplier).round(n_decimals)\n    }\n}\n\nexport function transform_stats_in_attributes(stats : Object[], stats_to_attributes: Object) : [Attributes, {[key: string]: number}] {\n    let attributes : Object[] = []\n    for (let player of stats){\n        let converted_player = {}\n        for (let to in stats_to_attributes){\n            let from = stats_to_attributes[to]\n            if(player[from] === undefined) throw new Error(`${from} not found in stats: ${JSON.stringify(player)}`);\n            \n            converted_player[to] = player[from]\n        }\n        attributes.push(converted_player)\n    }\n    return normalize(attributes)\n}\nfunction normalize(attributes) : [Attributes, {[key: string]: number}] {\n    let normalizer = new Normalizer()\n    let df = new dfd.DataFrame(attributes)\n    // @ts-ignore\n    window.df = df\n    let out\n    out = {\n        damage_per_ball: normalizer.normalize_stat(df.damage_per_ball, 20)\n        ,max_health: normalizer.normalize_stat(df.max_health, 100)\n        ,balls_per_second: normalizer.normalize_stat(df.balls_per_second, 1)\n        ,name: df.name\n    }\n    for(let k in out) {out[k] = out[k].values}\n    out = (new dfd.DataFrame(out))\n    let columns = out.columns\n    out = out.values //array of arrays\n    out = out.map(row => zip_key_vals(columns, row))\n    return [out as Attributes, normalizer.multipliers]\n}\n\nexport function dfToNative(df){\n    return df.values.map(row => zip_key_vals(df.columns, row))\n}\n\nfunction zip_key_vals(keys, vals) {\n  var rv = {};\n  for (var i = 0; i < keys.length; ++i)\n    rv[keys[i]] = vals[i];\n  return rv;\n}\n\n\n\n\nconst argFact = (compareFn) => (array) => array.map((el, idx) => [el, idx]).reduce(compareFn)[1]\n//const argMax = argFact((min, el) => (el[0] > min[0] ? el : min))\nconst argMin = argFact((max, el) => (el[0] < max[0] ? el : max))","import BTable from 'react-bootstrap/Table';\nimport { useTable } from 'react-table';\n\n\nexport function DataTable({ columns, data }) {\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow\n    } = useTable({ columns, data });\n    return (\n        <BTable {...getTableProps()} striped bordered hover>\n            <thead>\n                {headerGroups.map(headerGroup => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map(column => (\n                            <th {...column.getHeaderProps()}>\n                                {column.render('Header')}\n                            </th>\n                        ))}\n                    </tr>\n                ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n                {rows.map(row => {\n                    prepareRow(row);\n                    return (\n                        <tr {...row.getRowProps()}>\n                            {row.cells.map(cell => {\n                                return (\n                                    <td {...cell.getCellProps()}>\n                                        {cell.render('Cell')}\n                                    </td>\n                                );\n                            })}\n                        </tr>\n                    );\n                })}\n            </tbody>\n        </BTable>\n    );\n}\n","import Select from 'react-select'\nimport Button from 'react-bootstrap/Button'\nimport { dfToNative } from './stats'\nimport { useRef, } from 'react'\nimport { Stats } from './App'\nimport { DataTable } from \"./DataTable\"\n\nexport default function StatSelector({all_stats, filtered_stats, set_filtered_stats,\n        is_simulating, set_is_simulating}){\n    let select : any = useRef()\n    let players : any = useRef([])\n    all_stats = dfToNative(all_stats)\n    let teams = all_stats.map((x, idx) => ({value: idx, label: `${x.ano_campeonato}/${x.time}`}))\n    function update(e){\n        if(! (e instanceof Array) )\n            e = []\n        players.current = e.map(x => x.value)\n        update_parent_state()\n    }\n    function update_parent_state() {\n        if(players.current.length < 2) return\n        let out: Stats = []\n        for (let p of players.current)\n            out.push(all_stats[p])\n        set_filtered_stats(out)\n    }\n    function reset(){\n        //s1.current.select.clearValue();\n        //s2.current.select.clearValue();\n        set_is_simulating(false)\n    }\n    function go() {\n        update_parent_state()\n        set_is_simulating(true)\n    }\n    let columns = filtered_stats ? Object.keys(filtered_stats[0]).map(c => ({Header: c, accessor: c})) : null\n    return (\n        <div className='container'>\n        <div className='row'>\n            <div className='col-4' style={{ maxWidth: \"3000px\" }}>\n                <div> Player 1:\n                    <Select ref={select} name=\"Player 1\" isMulti isDisabled={is_simulating} onChange={update} options={teams} />\n                </div>\n                {is_simulating ? <Button onClick={reset}> RESET </Button> : null}\n                {players.current.length >= 2 && !is_simulating ? <Button onClick={go}> Start Simulation </Button> : null}\n            </div>\n            <div className='col' style={{overflowY: 'scroll'}}>\n                {   columns\n                    ? <DataTable columns={columns} data={filtered_stats} />\n                    : null\n                }\n            </div>\n        </div>\n        </div>\n    )\n}","import {Column} from 'react-table'\nimport {useEffect, useMemo, useRef} from 'react'\nimport {Attributes, attribute_labels} from './App'\nimport clone from 'just-clone'\nimport { DataTable } from './DataTable'\n\nconst game_state_columns = [\n    { Header: 'Health', accessor: 'game.health', Cell: GameStateCell},\n    { Header: 'Died at', accessor: 'game.died_at_string', Cell: GameStateCell},\n    { Header: 'Rank', accessor: 'game.rank', Cell: GameStateCell},\n    { Header: 'Damage Dealt', accessor: 'game.damage_dealt', Cell: GameStateCell},\n]\n\n\n//type Column = {Header?: string , accessor: string, stat_formula?: string, attribute_label?: string }\n\nfunction mount_column(attribute, stat, multiplier ): Column {\n    let multiplier_str = multiplier ? ` x ${multiplier<1 ? multiplier.toPrecision(1): multiplier}` : ''\n    return {\n        Header: Header({\n            attribute_label: `${attribute_labels[attribute]}`,\n            stat: stat,\n            multiplier_str: multiplier_str\n        }),\n        Cell: Cell,\n        accessor: attribute\n    }\n}\nfunction mount_columns(attributes: Attributes, stats_to_attributes, multipliers) : Column[] {\n    return Object.entries(stats_to_attributes).map(([k, _]) => {\n        return mount_column(k, stats_to_attributes[k], multipliers[k])\n    })\n}\n\nexport function Table({stats, attributes, stats_to_attributes, game_state,\n        start_time, multipliers}) {\n    let all_columns = useMemo( () => {\n        const columns = mount_columns(attributes, stats_to_attributes, multipliers)\n        return [columns[0], ...game_state_columns, ...columns.splice(1) ] // putting name first\n    }, [attributes, multipliers, stats_to_attributes])\n\n    let final_data = useMemo(() => mount_final_data(game_state, attributes, start_time), [game_state, attributes, start_time])\n\n    //return <div><p>{JSON.stringify(stats)}</p><p>{JSON.stringify(columns)}</p></div>\n    // return (<BTable>\n    //         <thead>{JSON.stringify(stats)}\n    //     <tr {...columns}/></thead></BTable>)\n\n   return <DataTable columns={all_columns} data={final_data}/>\n}\n\nfunction Cell({column, row, value, cell}){\n    return ( <div className=''> {value} </div>)\n}\nfunction GameStateCell({column, row, value, cell}){\n    let div : any = useRef(null)\n    let old_v = useRef(value)\n    useEffect(() =>{\n        if (old_v.current !== value) {\n            div.current.className = ''\n            setTimeout(()=>{\n                div.current.className = 'color-animation'\n            }, 30)\n        }\n        old_v.current = value\n    })\n    return ( <div className='' ref={div}> {value} </div>)\n}\nfunction Header({attribute_label, stat, multiplier_str}){\n    let out = (\n        <div className=\"px-0 mx-0 text-nowrap\">\n            <span className=\"pr-0 flex-grow-0 \"> {/* attribute */}\n                {attribute_label}\n            </span>\n            <span className=\"pl-0 flex-grow-0\"> {/* formula */}\n                <span className=\"font-weight-light\">\n                    <span> {\" = \"} </span>\n                    <span className=\"text-info font-weight-bold\" >{stat}</span>\n                    <span>{multiplier_str}</span>\n                </span>\n            </span>\n        </div>\n    )\n    return out\n}\n\nfunction mount_final_data(game_state, attributes, start_time){\n    if(game_state === null) {// game hasn't started\n        return attributes\n    }\n\n    let rank = _rank_duplicate(game_state.map((x) => x.died_at !== null ? x.died_at.getTime() : Infinity))\n    let final_data = clone(attributes)\n    for (var i=0; i < final_data.length; i++) {\n        final_data[i].game = {...game_state[i]}\n        if(final_data[i].game.died_at !== null)\n            final_data[i].game.died_at_string = ((final_data[i].game.died_at - start_time)/1000).toFixed(1) + 's'\n        if(rank !== null)\n            final_data[i].game.rank = rank[i]\n    }\n    return final_data\n\n}\n\n\nfunction _rank_duplicate(arr: number[]) {\n    const sorted = [...new Set(arr)].sort((a: number, b: number) => b - a);\n    const rank = new Map(sorted.map((x, i) => [x, i + 1]));\n    return arr.map((x) => rank.get(x) as number);\n}","/* eslint no-unused-vars: \"off\" */\nimport { Bodies, Body, Composite,} from 'matter-js'\nimport { Env } from './env'\nimport Player from './player'\n\n// import ball from './sprites/ball.png'\n// function get_pattern(){\n//     var canvas : any = document.getElementById('canvas')?.children[0]\n//     var ctx = canvas.getContext('2d');\n//     let img = new Image()\n//     img.src = ball\n//     return ctx.createPattern(img, 'repeat');\n// }\n\ndeclare module 'matter-js' {\n  interface Body {\n    isParticle: boolean\n    decaySpeed: number\n  }\n  interface Runner {\n    fps: any\n  }\n}\n\n\nexport class ParticleEmitterFactory {\n    env: Env\n\n    constructor(env: Env) {\n        if(env.particle_factory !== undefined) { throw new Error(\"Only one factory per env\")}\n        this.env = env\n    }\n    create(x, y, opts) {\n        return new Emitter(x, y, {env: this.env, ...opts})\n    }\n}\n\nexport class Emitter{\n    static numParticles = 0;\n    env: Env\n    particlesAdded: number\n    pos: {x, y}\n    options: any \n    running: boolean\n    owner: Player\n\n    constructor(x, y, {owner, env, ...options}) {\n        this.env = env\n        this.particlesAdded = 0;\n        let defaults = Emitter.defaults;\n        //Reset options to defaults\n        // let options = (...defaults, ...options)\n        if (options === undefined) {\n            options = defaults;\n        }\n        if (options.collisions === undefined) {\n            options.collisions = defaults.collisions;\n        }\n        if (options.isStatic === undefined) {\n            options.isStatic = defaults.isStatic;\n        }\n        if (options.size === undefined) {\n            options.size = defaults.size;\n        } else if (typeof options.size === \"number\") {\n            options.size = {\n                min: options.size,\n                max: options.size\n            };\n        }\n        if (options.amount === undefined) {\n            options.amount = defaults.amount;\n        }\n        if (options.interval === undefined) {\n            options.interval = defaults.interval;\n        }\n        if (options.velocity === undefined) {\n            options.velocity = defaults.velocity;\n        }\n        if (options.velocity.direction === undefined) {\n            options.velocity.direction = defaults.velocity.direction;\n        } else if (options.velocity.direction.x === undefined) {\n            options.velocity.direction.x = defaults.velocity.direction.x;\n        } else if (options.velocity.direction.y === undefined) {\n            options.velocity.direction.y = defaults.velocity.direction.y;\n        }\n        if (options.colors === undefined) {\n            options.colors = defaults.colors;\n        } else if (typeof options.colors === \"string\") {\n            options.colors = [options.colors];\n        }\n        if (options.delay === undefined) {\n            options.delay = defaults.delay;\n        }\n        if (options.frictionAir === undefined) {\n            options.frictionAir = defaults.frictionAir;\n        }\n        if (options.parent === undefined) {\n            options.parent = defaults.parent;\n        }\n        if (options.collisionFilter === undefined) {\n            options.collisionFilter = defaults.collisionFilter;\n        }\n        if (options.amountPerTick === undefined || options.amountPerTick < 1) {\n            options.amountPerTick = defaults.amountPerTick;\n        }\n        if (options.decaySpeed === undefined) {\n            options.decaySpeed = defaults.decaySpeed;\n        }\n        if (options.decaySpeed < 0) {\n            options.decaySpeed = 0;\n        }\n        if (options.decaySpeed > 1) {\n            options.decaySpeed = 1;\n        }\n\n        options.collisions = options.collisions ? false : true;\n\n        //Reset x/y to defaults\n        if (x === undefined) {\n            x = defaults.x;\n        }\n        if (y === undefined) {\n            y = defaults.y;\n        }\n\n        //Change velocity.direction\n        let dir = options.velocity.direction;\n        if (typeof dir.y === \"string\") {\n            dir.y = dir.y.toLowerCase();\n            if (dir.y === \"up\") {\n                options.velocity.direction.y = -1;\n            } else if (dir.y === \"down\") {\n                options.velocity.direction.y = 1;\n            } else if (dir.y === \"none\") {\n                options.velocity.direction.y = 0;\n            }\n        }\n        if (typeof dir.x === \"string\") {\n            dir.x = dir.x.toLowerCase();\n            if (dir.x === \"left\") {\n                options.velocity.direction.x = -1;\n            } else if (dir.x === \"right\") {\n                options.velocity.direction.x = 1;\n            } else if (dir.x === \"none\") {\n                options.velocity.direction.x = 0;\n            }\n        }\n\n        this.pos = { x: x, y: y }\n        this.options = options\n        this.running = false\n        this.owner = owner\n    }\n    stop() {\n        let e = this;\n        let amount = this.options.amount;\n        this.options.amount = 0;\n        this.running = false;\n        requestAnimationFrame(function() {\n            requestAnimationFrame(function() {\n                e.options.amount = amount;\n            });\n        });\n    }\n    start() {\n        this.running = true\n        this.particlesAdded = 0;\n        this.addParticle();\n    }\n    addParticle(duplicated=false) { // debug / rewrite this\n        let emitter = this\n        let pos = this.pos;\n        let posX = pos.x;\n        let posY = pos.y;\n        let options = this.options;\n        let delay = options.delay / this.env.engine.timing.timeScale;\n        let pSize = options.size;\n        let colors = options.colors;\n        let vel = options.velocity;\n        let number = options.amount;\n        let interval = options.interval;\n        let interactive = options.collisions;\n        let frictionAir = options.frictionAir;\n        let direction = options.velocity.direction;\n        let collisionFilter = options.collisionFilter;\n        let amountPerTick = options.amountPerTick;\n\n        Emitter.numParticles++;\n        this.particlesAdded++;\n\n        if (this.options.parent !== undefined) {\n            let parent = this.options.parent;\n            pos = parent.position;\n            this.pos = pos;\n\n            if (parent.label === \"Circle Body\") {\n                let angle = Math.random() * Math.PI * 2;\n                let dist = Math.random() * parent.circleRadius;\n\n                posX = dist * Math.cos(angle) + posX;\n                posY = dist * Math.sin(angle) + posY;\n            } else if (parent.label === \"Rectangle Body\") {\n                posX =\n                    Math.random() * (parent.bounds.max.x - parent.bounds.min.x) +\n                    parent.bounds.min.x;\n                posY =\n                    Math.random() * (parent.bounds.max.y - parent.bounds.min.y) +\n                    parent.bounds.min.y;\n            }\n        }\n\n        let name = \"particle\" + Emitter.numParticles;\n        let size = random(pSize.min, pSize.max);\n        let color = colors[Math.round(random(colors.length))];\n        color = color !== undefined ? color : colors[0];\n\n        if (color === \"random\") {\n            let r = random(0, 255);\n            let g = random(0, 255);\n            let b = random(0, 255);\n            color = \"rgb(\" + r + \", \" + g + \", \" + b + \")\";\n        }\n\n        let particle_opts = (({\n            friction,\n            frictionStatic,\n            inertia\n        }) => ({\n            friction,\n            frictionStatic,\n            inertia\n        }))(this.options);\n        //let pattern = get_pattern()\n        let particle = Bodies.polygon(posX, posY, 6, size, {\n            isSensor: interactive,\n            isStatic: this.options.isStatic,\n            density: 1,\n            restitution: this.options.restituition,\n            frictionAir: frictionAir,\n            render: {\n                // fillStyle: pattern\n                fillStyle: color\n                // ,sprite: {\n                //     texture: ball,\n                //     xScale: 0.01,\n                //     yScale: 0.01\n                // }\n            },\n            ...particle_opts\n        });\n        particle.decaySpeed = options.decaySpeed\n        particle.isParticle = true\n        particle.owner = this.owner\n        this.env.particles[name] = particle\n\n        Composite.add(this.env.world, particle);\n\n        if (collisionFilter !== undefined) {\n            particle.collisionFilter = collisionFilter;\n        }\n\n        let velX = random(0, vel.x);\n        let velY = random(0, vel.y);\n\n        if (vel.y === undefined) {\n            velY = random(0, 2);\n        }\n        if (vel.x === undefined) {\n            velX = random(0, 2);\n        }\n\n        if (direction.x === undefined || direction.x === 0) {\n            velX = Boolean(Math.round(random())) ? velX : velX * -1;\n        } else {\n            velX *= direction.x;\n        }\n\n        if (direction.y === undefined || direction.y === 0) {\n            velY = Boolean(Math.round(random())) ? velY : velY * -1;\n        } else {\n            velY *= direction.y;\n        }\n        Body.setVelocity(particle, {\n            x: velX,\n            y: velY\n        });\n\n        let scale = 1;\n\n        function decreaseScale() {\n            scale -= options.decaySpeed * emitter.env.engine.timing.timeScale;\n            particle.circleRadius = size * scale;\n            if (particle.circleRadius > options.decaySpeed) {\n                requestAnimationFrame(decreaseScale);\n            } else {\n                Composite.remove(emitter.env.world, particle);\n            }\n        }\n        setTimeout(decreaseScale, delay);\n\n        if (this.particlesAdded < number && !duplicated) {\n            if (interval > 0) {\n                let framesPast = 0;\n                function waitForInterval() {\n                    if (emitter.options.amount > 0) {\n                        framesPast += emitter.env.engine.timing.timeScale;\n                        if (emitter.env.runner !== undefined && emitter.env.runner.fps !== undefined) {\n                            if (framesPast >= interval / (1000 / emitter.env.runner.fps)) {\n                                if (amountPerTick > 1) {\n                                    for (let i = amountPerTick; i--;) {\n                                        if (i !== 0) {\n                                            emitter.addParticle(true);\n                                        } else {\n                                            emitter.addParticle();\n                                        }\n                                    }\n                                } else {\n                                    //here\n                                    emitter.addParticle();\n                                }\n                            } else {\n                                requestAnimationFrame(waitForInterval);\n                            }\n                        } else {\n                            if (\n                                framesPast >=\n                                interval / 16.67 / emitter.env.engine.timing.timeScale\n                            ) {\n                                for (let i = amountPerTick; i--;) {\n                                    if (i !== 0) {\n                                        emitter.addParticle(true);\n                                    } else {\n                                        emitter.addParticle();\n                                    }\n                                }\n                            } else {\n                                requestAnimationFrame(waitForInterval);\n                            }\n                        }\n                    } else {\n                        emitter.running = false;\n                    }\n                }\n                requestAnimationFrame(waitForInterval);\n            } else {\n                emitter.addParticle();\n            }\n        }\n    }\n\n    static defaults = {\n        colors: [\"#FE601C\", \"#EBDB14\", \"#EB471F\", \"#ED7A0E\"],\n        collisions: false,\n        isStatic: false,\n        x: window.innerWidth / 2,\n        y: window.innerHeight / 2,\n        size: {\n            min: 0.5,\n            max: 2\n        },\n        amount: 50,\n        interval: 0,\n        amountPerTick: 1,\n        velocity: {\n            x: 5,\n            y: 5,\n            direction: {\n                x: \"none\",\n                y: \"none\"\n            }\n        },\n        delay: 400,\n        decaySpeed: 0.1,\n        frictionAir: 0.02,\n        parent: undefined,\n        collisionFilter: undefined\n    }\n}\n\nfunction random(min:any=undefined, max:any=undefined) {\n        if (min === undefined && max === undefined) {\n            min = 0;\n            max = 1;\n        } else if (max === undefined) {\n            max = min;\n            min = 0;\n        }\n        return Math.random() * (max - min) + min;\n}\n\n","/* eslint no-unused-vars: \"off\" */\nimport Color from \"color\";\nimport { Bodies, Body, Composite, World } from 'matter-js';\nimport { Env } from \"./env\";\nimport { Emitter } from \"./particle-factory\";\n\nconst pallete = '#F51720 #FA26A0 #F8D210 #2FF3E0'.split(' ').map(x => new Color(x))\n\nexport default class Player {\n    shape: Body\n    health: number\n    max_health: number\n    died_at: Date | null\n    damage_dealt: number\n    idx: number\n    env: Env\n    world: World\n    color: Color\n    original_color: Color\n    emitter! : Emitter\n    name: string\n    damage_per_ball: number\n    balls_per_second: number\n\n\n  static idx = 0;\n  constructor(x, y, env, {max_health, name, damage_per_ball, balls_per_second}) {\n    this.idx = Player.idx++;\n    this.max_health = max_health;\n    this.health = this.max_health;\n    this.env = env;\n    this.world = this.env.world;\n    this.color = pallete[this.idx % pallete.length]\n    this.original_color = pallete[this.idx % pallete.length]\n    this.shape = this._build_shape(x, y);\n    this.damage_per_ball = damage_per_ball\n    this.balls_per_second = balls_per_second\n    this.damage_dealt = 0\n    this.died_at = null\n    this.name = name\n  }\n\n  _build_shape(x, y) {\n    let opts = {\n      isStatic: true,\n      render: {\n        fillStyle: this.color.string(),\n        strokeStyle: \"white\",\n        lineWidth: 3\n      },\n      collisionFilter: this.collision_filter\n    };\n    let shape = Bodies.rectangle(x, y, 30, 30, opts)\n    shape.player = this\n    return shape\n  }\n\n  get collision_filter() {\n    let category = 1 << (this.idx + 1); // +1 because category 1 is the default (walls)\n    let mask = -1 ^ category; // colide with all but yourself\n    return { category: category, mask: mask, group: 0 };\n  }\n\n  build_emitter() {\n    let opts = {\n      amount: Infinity,\n      interval: 1000 / this.balls_per_second,\n      amountPerTick: 1, // batch size\n      size: { min: 5, max: 20 },\n      delay: 1000 * 10,\n      collisions: true,\n      restituition: 1,\n      colors: this.original_color.string(),\n      collisionFilter: this.collision_filter,\n      frictionStatic: 0,\n      frictionAir: 0,\n      friction: 0,\n      decaySpeed: 0.03,\n    };\n    // Composite.add(this.world, Bodies.polygon(300, 300, 10, 50, {restituition: 1, friction:0, frictionAir:0, frictionStatic:0}))\n    // return\n    this.emitter = this.env.particle_factory.create(\n      this.x,\n      this.y,\n      {owner: this, ...opts}\n    );\n    this.emitter.start();\n  }\n\n  get x() {\n    return this.shape.position.x;\n  }\n\n  get y() {\n    return this.shape.position.y;\n  }\n\n  take_damage(damage) {\n    this.health -= damage;\n    if (this.health <= 0) {\n      this.die();\n    }\n    let health_percentage = this.health / this.max_health;\n    this.color = this.color.alpha(health_percentage)\n    this.shape.render.fillStyle = this.color.string();\n    return damage\n  }\n\n  die() {\n    console.log(`Player ${this.idx} DIED`);\n    Composite.remove(this.world, this.shape);\n    this.emitter.stop();\n    this.died_at = new Date()\n  }\n}\n\n","/* eslint no-unused-vars: \"off\" */\nimport Matter, { Bodies, Composite, Engine,\n    Events, Mouse, MouseConstraint, Render, Runner, Vector, \n} from 'matter-js';\nimport { ParticleEmitterFactory } from \"./particle-factory\";\nimport Player from \"./player\";\n\n// @ts-ignore\nMatter.Resolver._restingThresh = 0.1 // solving bug: https://github.com/liabru/matter-js/issues/394\n// @ts-ignore\nMatter.Resolver._restingThreshTangent = 1\n\n\nconsole.clear();\n// matter-tools by liabru https://github.com/liabru/matter-tools\n\n\ndeclare module 'matter-js' {\n  interface Body {\n    player: Player\n    owner: Player\n  }\n}\n\n\n//type FUN = (arg:any) => any\nconst MAX_PLAYERS = 8\n\nexport class Env {\n    game_state_callback: Function | undefined\n    engine!: Engine\n    world: any\n    particle_factory!: ParticleEmitterFactory\n    render!: Render\n    runner!: Runner\n    particles: {}\n    H: number; W: number\n    walls!: Matter.Bodies[];\n\n    constructor(game_state_callback?, opts?: {H?, W?}){\n        this.particles = {}\n\n        // create engine\n        this.engine = Engine.create({velocityIterations: 8});\n        // @ts-ignore\n        this.engine.gravity.scale = 0;\n        this.world = this.engine.world;\n\n        this.particle_factory = new ParticleEmitterFactory(this);\n        this.game_state_callback = game_state_callback\n\n        this.H = opts?.H || 1000;\n        this.W = opts?.W || 1000;\n        console.log(this.H)\n    }\n    destroy(){\n        this.stop()\n        Composite.clear(this.world, false, true);\n        Engine.clear(this.engine);\n        this.game_state_callback = undefined\n    }\n    setup(element_id: string, player_stats : Array<Object>) {\n        var render = Render.create({\n            element: document.getElementById(element_id) as HTMLElement,\n            engine: this.engine,\n            options: {\n                width: this.W,\n                height: this.H,\n                wireframes: false,\n                // @ts-ignore\n                showDebug: false,\n                showAngleIndicator: true,\n            }\n        });\n        this.render = render;\n\n        Render.run(render);\n\n        // create runner\n        this.runner = Runner.create();\n\n        this.add_mouse_control();\n        this.build_players(player_stats);\n\n        this.update_game_state()\n\n        this.register_events();\n\n        Runner.run(this.runner, this.engine);\n\n        // fit the render viewport to the scene\n        Render.lookAt(render, {\n            min: { x: 0, y: 0 },\n            max: { x: this.W, y: this.H }\n        });\n    }\n    add_mouse_control() {\n        var mouse = Mouse.create(this.render.canvas),\n            mouseConstraint = MouseConstraint.create(this.engine, {\n                mouse: mouse,\n                // @ts-ignore\n                constraint: {\n                    stiffness: 0.0002,\n                    render: {\n                        visible: true\n                    }\n                }\n            });\n        Events.on(mouseConstraint, 'mousedown', function (event) {\n            // @ts-ignore\n            var mousePosition = event.mouse.position;\n            console.log('mousedown at ' + mousePosition.x + ' ' + mousePosition.y);\n        });\n\n        Composite.add(this.world, mouseConstraint as any);\n        // @ts-ignore\n        this.render.mouse = mouse;\n    }\n    stop() {\n        Matter.Render.stop(this.render);\n        Matter.Runner.stop(this.runner);\n    }\n    players!: Array<Player>\n\n    get_player_coords(idx, n: number) {\n        if (n < 2) throw new Error('only >= 2 players supported')\n        if (idx >= n) throw new Error(`wrong index ${idx} >= ${n}`)\n        if (n === 2)\n            idx = {0: 3, 1: 1}[idx] // if 2 players on a square, position players so that oponents face each other\n        let margin = 120\n        let wall: Vector[] = (this.walls[idx] as any).vertices\n        let [v0, v1] = find_largest_line(wall)\n        let perp = Vector.normalise(Vector.perp(Vector.sub(v1, v0)))\n        let middle = Vector.mult(Vector.add(v0, v1), 0.5)\n        let coords = Vector.add(Vector.mult(perp, margin), middle)\n        return coords\n    }\n    build_players(player_stats) {\n        if(player_stats.length < 2 || player_stats.length > MAX_PLAYERS)\n            throw new Error(`Unsuported number of players ${player_stats.length}`);\n        this.build_play_field(player_stats.length)\n        this.players = []\n        player_stats.forEach((p_stats, idx) => {\n            let {x, y} = this.get_player_coords(idx, player_stats.length)\n            let p = new Player(x, y, this, p_stats);\n            this.players.push(p)\n            Composite.add(this.world, p.shape);\n        })\n        this.players.map((p) => p.build_emitter());\n    }\n    build_play_field(n_players) {\n        let opts = { isStatic: true } //, friction:0, restituition:1, frictionStatic:0, inertia: 10000};\n        let walls : Bodies[] = []\n        if (n_players === 2)\n            n_players = 4 // build a square anyway\n        // build a regular polygon\n        const middle = {x: this.W/2, y: this.H/2}, border = 30\n        const radius = (Math.min(this.W/2, this.H/2)-border) / Math.cos(Math.PI/n_players) // multiplying by constant to convert radius to inradius\n        const smaller = Bodies.polygon(middle.x, middle.y, n_players, radius).vertices\n        const bigger  = Bodies.polygon(middle.x, middle.y, n_players, radius + border).vertices\n        for (var i=0; i< smaller.length; i++) {\n            const ip1 = (i+1)%smaller.length\n            const sides = [smaller[i], smaller[ip1], bigger[ip1], bigger[i]]\n            let b = Bodies.fromVertices(middle.x, middle.y, [sides], opts)\n            const offset = {x: sides[0].x - b.vertices[0].x, y: sides[0].y - b.vertices[0].y} // fromVertices translates bodies immediatly after creation, so we undo this\n            Matter.Body.translate(b, offset)\n            walls.push(b)\n        }\n        this.walls = walls\n        Composite.add(this.world, walls as any);\n    }\n    update_game_state() {\n        if (!this.game_state_callback) return\n        let game_state = this.players.map(p => {return {\n            health: p.health, died_at: p.died_at || null, damage_dealt: p.damage_dealt\n        }})\n        setTimeout(() => this.game_state_callback!(game_state), 0)\n    }\n    register_events() {\n        const env = this\n        Events.on(this.engine, \"collisionStart\", function (e) { // cant seem to register event on players object themselves TODO: check this later\n          var pairs = e.pairs;\n          pairs = pairs.filter((el, _) => {\n            return el.bodyA.player || el.bodyB.player;\n          });\n\n          // change object colours to show those starting a collision\n          for (var i = 0; i < pairs.length; i++) {\n            let pair = pairs[i];\n            let player_shape = pair.bodyA.player ? pair.bodyA : pair.bodyB;\n            let other_shape = !pair.bodyA.player ? pair.bodyA : pair.bodyB;\n            let player = player_shape.player;\n            if (other_shape.isParticle){\n                Composite.remove(env.world, other_shape)\n                explode(other_shape.position, env.particle_factory)\n            }\n            let damage = other_shape.owner.damage_per_ball\n            player.take_damage(damage);\n            if (other_shape.owner === undefined){\n                debugger\n            }\n            other_shape.owner.damage_dealt += damage\n            env.update_game_state()\n          }\n        });\n    }\n\n    title = \"Env\";\n    for = \">=0.14.2\";\n}\n\nfunction explode(position, particle_factory) {\n    let emitter = particle_factory.create(\n            position.x,\n            position.y,\n            {collisions: false, amount: 40, amountPerTick:10, interval: 1, collisionFilter:{group: -1}}\n    );\n    emitter.start();\n}\n\nfunction find_largest_line(v: Vector[]){\n    let max_idx = 0, max_mag = 0\n    for(var i=0; i<v.length;i++){\n        let mag = Vector.magnitudeSquared(Vector.sub(v[i], v[(i+1)% v.length]))\n        if(max_mag < mag){\n            max_mag = mag\n            max_idx = i\n        }\n    }\n    return [v[max_idx], v[(max_idx+1)%v.length]]\n}","import React, { useEffect, useMemo, useRef } from 'react';\nimport { useState } from 'react';\nimport { Table } from './Table';\nimport Button from 'react-bootstrap/Button';\nimport { transform_stats_in_attributes } from \"./stats\";\nimport { Attributes, stats_to_attributes, } from './App';\nimport * as Env from './env'\n\ndeclare global { interface Window {\n    env: Env.Env\n} }\n\nexport function Game({ stats, }) {\n    const [attributes, multipliers]: [Attributes, { [key: string]: number; }] = useMemo(\n        () => transform_stats_in_attributes(stats, stats_to_attributes), [stats]);\n    let [game_state, set_game_state] = useState(null);\n    let [start_time, set_start_time] = useState(new Date());\n    let canvas = useRef<any>();\n\n\n    function restart_sim() {\n        rebuild_canvas(canvas, attributes, set_game_state);\n        set_start_time(new Date());\n    }\n\n    useEffect(() => {\n        rebuild_canvas(canvas, attributes, set_game_state);\n        return () => window.env.destroy();\n    }, [attributes]);\n\n    return (<div className=\"container\">\n        <div style={{ overflowY: 'scroll' }}>\n            <Table stats={stats} attributes={attributes}\n                stats_to_attributes={stats_to_attributes}\n                game_state={game_state} start_time={start_time}\n                multipliers={multipliers} />\n        </div>\n        <Button onClick={restart_sim}> Restart Simulation </Button>\n        <div className=\"mt-1\"></div>\n        <div id=\"canvas\" ref={canvas}></div>\n    </div>);\n}\n\nfunction rebuild_canvas(canvas, attributes, set_game_state) {\n    if (canvas.current === undefined) return\n    window.env?.destroy()\n    window.env = new Env.Env(set_game_state, )\n    canvas.current.innerHTML = \"\"\n    window.env.setup(\"canvas\", attributes);\n    console.log('rebuilding canvas')\n}","import './App.css';\nimport React from 'react'\nimport {useState} from 'react'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nimport { BrowserRouter as Router, Route, } from \"react-router-dom\";\n\nimport Debugger from \"./Debugger\"\n\nimport stats_with_metadata from './StatLoader'\nimport StatSelector from './StatSelector'\nimport { Game } from './Game';\n\n\n/*\n* stats: real life stats\n* attributes: game initial attributes \n* game_state: game current state\n*/\ntype _StringKeyObject = {[key: string]: any}\ntype Stat = _StringKeyObject\nexport type Stats = Stat[]\nexport type Attributes = _StringKeyObject[]\n// type GameState = _StringKeyObject\n\nexport const stats_to_attributes = {\n    name: 'time',\n    max_health: 'defesas_total',\n    balls_per_second: 'gols_total',\n    damage_per_ball: 'vitorias_total'\n}\n\nexport const attribute_labels = {\n    name: 'Player Name',\n    max_health: 'Max Health',\n    balls_per_second: 'Balls per Second',\n    damage_per_ball: 'Damage per Ball'\n}\n\nlet all_stats : Stats = stats_with_metadata.data\n\nfunction App() {\n    let [filtered_stats, set_filtered_stats] = useState(null);\n    let [is_simulating, set_is_simulating] = useState(false);\n    return (\n        <Router>\n            <Route path=\"*#debug\">\n                <Debugger env={window.env}/>\n            </Route>\n            <Route path=\"/\">\n            <div className=\"App\">\n                <StatSelector {...{is_simulating}} filtered_stats={filtered_stats} all_stats={all_stats}\n                        set_filtered_stats={set_filtered_stats} set_is_simulating={set_is_simulating}/>\n                { is_simulating ? \n                    (filtered_stats ? \n                        <Game stats={filtered_stats}/>\n                    :\n                        'No data to sim'\n                    )\n                  : null\n                }\n            </div>\n            </Route>\n        </Router>\n    )\n}\n\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}