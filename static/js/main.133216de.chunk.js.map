{"version":3,"sources":["particle-factory.js","player.js","env.js","table.js","App.js","reportWebVitals.js","index.js"],"names":["numParticles","particlesAdded","Composite","Matter","Engine","Render","Runner","Composites","Bodies","Common","World","Player","Grid","MouseConstraint","Mouse","Body","Events","x","y","env","this","idx","max_health","health","world","color","pallete","length","original_color","shape","_build_shape","opts","isStatic","render","fillStyle","string","strokeStyle","lineWidth","collisionFilter","collision_filter","rectangle","player","is_player","category","mask","group","amount","Infinity","interval","amountPerTick","size","min","max","delay","collisions","restituition","colors","frictionStatic","frictionAir","friction","decaySpeed","emmiter","particle_factory","emitter","create","start","position","damage","die","health_percentage","alpha","console","log","remove","stop","dead","split","map","Color","Resolver","_restingThresh","_restingThreshTangent","clear","window","H","W","Env","title","for","element_id","engine","velocityIterations","gravity","scale","particles","Particle","defaults","innerWidth","innerHeight","velocity","direction","parent","undefined","canvas","width","height","background","wireframes","showBroadphase","random","Math","options","dir","toLowerCase","finalEmitter","pos","running","e","requestAnimationFrame","explode","addParticle","duplicate","posX","posY","timing","timeScale","pSize","vel","number","interactive","label","angle","PI","dist","circleRadius","cos","sin","bounds","name","round","particle_opts","inertia","polygon","isSensor","isParticle","density","restitution","particle","add","velX","velY","Boolean","setVelocity","setTimeout","decreaseScale","framesPast","waitForInterval","runner","fps","i","ParticleFactory","element","document","getElementById","showAngleIndicator","showDebug","run","build_play_field","add_mouse_control","build_players","register_events","lookAt","mouse","mouseConstraint","constraint","stiffness","visible","p1","p2","players","p","build_emmiter","on","pairs","filter","el","_","bodyA","bodyB","pair","other","take_damage","restart","innerHTML","setup","Table","props","useTable","columns","data","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","striped","bordered","hover","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","row","getRowProps","cells","cell","getCellProps","Info","stats","useMemo","goals","Header","accessor","App","useEffect","className","Button","onClick","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.133216de.chunk.js","sourcesContent":["/* eslint no-unused-vars: \"off\" */\nimport { Engine, Render, Runner, Composites,\n  Composite, Common, World, Bodies, Grid,\n  MouseConstraint, Mouse, Body, Events, } from 'matter-js'\n\n\nvar numParticles = 0;\nvar particlesAdded = 0;\nexport function ParticleFactory(env) {\n  env.particles = {}\n  let Particle = {\n    defaults: {\n      colors: [\"#FE601C\", \"#EBDB14\", \"#EB471F\", \"#ED7A0E\"],\n      collisions: false,\n      isStatic: false,\n      x: window.innerWidth / 2,\n      y: window.innerHeight / 2,\n      size: {\n        min: 0.5,\n        max: 2\n      },\n      amount: 50,\n      interval: 0,\n      amountPerTick: 1,\n      velocity: {\n        x: 5,\n        y: 5,\n        direction: {\n          x: \"none\",\n          y: \"none\"\n        }\n      },\n      delay: 400,\n      decaySpeed: 0.1,\n      frictionAir: 0.02,\n      parent: undefined,\n      collisionFilter: undefined\n    },\n    engine: {\n      defaults: {\n        canvas: undefined,\n        width: window.innerWidth,\n        height: window.innerHeight,\n        background: \"transparent\",\n        wireframes: false,\n        showBroadphase: false\n      },\n    },\n    emitter: {\n      random(min, max) {\n        if (min === undefined && max === undefined) {\n          min = 0;\n          max = 1;\n        } else if (max === undefined) {\n          max = min;\n          min = 0;\n        }\n\n        return Math.random() * (max - min) + min;\n      },\n      create(x, y, options) {\n        let defaults = Particle.defaults;\n\n        //Reset options to defaults\n        if (options === undefined) {\n          options = defaults;\n        }\n        if (options.collisions === undefined) {\n          options.collisions = defaults.collisions;\n        }\n        if (options.isStatic === undefined) {\n          options.isStatic = defaults.isStatic;\n        }\n        if (options.size === undefined) {\n          options.size = defaults.size;\n        } else if (typeof options.size === \"number\") {\n          options.size = {\n            min: options.size,\n            max: options.size\n          };\n        }\n        if (options.amount === undefined) {\n          options.amount = defaults.amount;\n        }\n        if (options.interval === undefined) {\n          options.interval = defaults.interval;\n        }\n        if (options.velocity === undefined) {\n          options.velocity = defaults.velocity;\n        }\n        if (options.velocity.direction === undefined) {\n          options.velocity.direction = defaults.velocity.direction;\n        } else if (options.velocity.direction.x === undefined) {\n          options.velocity.direction.x = defaults.velocity.direction.x;\n        } else if (options.velocity.direction.y === undefined) {\n          options.velocity.direction.y = defaults.velocity.direction.y;\n        }\n        if (options.colors === undefined) {\n          options.colors = defaults.colors;\n        } else if (typeof options.colors === \"string\") {\n          options.colors = [options.colors];\n        }\n        if (options.delay === undefined) {\n          options.delay = defaults.delay;\n        }\n        if (options.frictionAir === undefined) {\n          options.frictionAir = defaults.frictionAir;\n        }\n        if (options.parent === undefined) {\n          options.parent = defaults.parent;\n        }\n        if (options.collisionFilter === undefined) {\n          options.collisionFilter = defaults.collisionFilter;\n        }\n        if (options.amountPerTick === undefined || options.amountPerTick < 1) {\n          options.amountPerTick = defaults.amountPerTick;\n        }\n        if (options.decaySpeed === undefined) {\n          options.decaySpeed = defaults.decaySpeed;\n        }\n        if (options.decaySpeed < 0) {\n          options.decaySpeed = 0;\n        }\n        if (options.decaySpeed > 1) {\n          options.decaySpeed = 1;\n        }\n\n        options.collisions = options.collisions ? false : true;\n\n        //Reset x/y to defaults\n        if (x === undefined) {\n          x = defaults.x;\n        }\n        if (y === undefined) {\n          y = defaults.y;\n        }\n\n        //Change velocity.direction\n        let dir = options.velocity.direction;\n        if (typeof dir.y === \"string\") {\n          dir.y = dir.y.toLowerCase();\n          if (dir.y === \"up\") {\n            options.velocity.direction.y = -1;\n          } else if (dir.y === \"down\") {\n            options.velocity.direction.y = 1;\n          } else if (dir.y === \"none\") {\n            options.velocity.direction.y = 0;\n          }\n        }\n        if (typeof dir.x === \"string\") {\n          dir.x = dir.x.toLowerCase();\n          if (dir.x === \"left\") {\n            options.velocity.direction.x = -1;\n          } else if (dir.x === \"right\") {\n            options.velocity.direction.x = 1;\n          } else if (dir.x === \"none\") {\n            options.velocity.direction.x = 0;\n          }\n        }\n\n        //Create final emitter\n        let finalEmitter = {\n          pos: { x: x, y: y },\n          options: options,\n          running: false\n        };\n\n        //Add stop function\n        finalEmitter.stop = function () {\n          let e = this;\n          let amount = this.options.amount;\n          this.options.amount = 0;\n          this.running = false;\n          requestAnimationFrame(function () {\n            requestAnimationFrame(function () {\n              e.options.amount = amount;\n            });\n          });\n        };\n        finalEmitter.start = function () {\n          Particle.emitter.explode(this);\n        };\n        finalEmitter.explode = finalEmitter.start;\n\n        //Return final emitter\n        return finalEmitter;\n      },\n      explode(emitter) {\n        emitter.running = true;\n        var random = Particle.emitter.random;\n        particlesAdded = 0;\n\n        function addParticle(duplicate) {\n          let pos = emitter.pos;\n          let posX = pos.x;\n          let posY = pos.y;\n          let options = emitter.options;\n          let delay = options.delay / env.engine.timing.timeScale;\n          let pSize = options.size;\n          let colors = options.colors;\n          let vel = options.velocity;\n          let number = options.amount;\n          let interval = options.interval;\n          let interactive = options.collisions;\n          let frictionAir = options.frictionAir;\n          let direction = options.velocity.direction;\n          let collisionFilter = options.collisionFilter;\n          let amountPerTick = options.amountPerTick;\n\n          numParticles++;\n          particlesAdded++;\n\n          if (emitter.options.parent !== undefined) {\n            let parent = emitter.options.parent;\n            pos = parent.position;\n            emitter.pos = pos;\n\n            if (parent.label === \"Circle Body\") {\n              let angle = Math.random() * Math.PI * 2;\n              let dist = Math.random() * parent.circleRadius;\n\n              posX = dist * Math.cos(angle) + posX;\n              posY = dist * Math.sin(angle) + posY;\n            } else if (parent.label === \"Rectangle Body\") {\n              posX =\n                Math.random() * (parent.bounds.max.x - parent.bounds.min.x) +\n                parent.bounds.min.x;\n              posY =\n                Math.random() * (parent.bounds.max.y - parent.bounds.min.y) +\n                parent.bounds.min.y;\n            }\n          }\n\n          let name = \"particle\" + numParticles;\n          let size = random(pSize.min, pSize.max);\n          let color = colors[Math.round(random(colors.length))];\n          color = color !== undefined ? color : colors[0];\n\n          if (color === \"random\") {\n            let r = random(0, 255);\n            let g = random(0, 255);\n            let b = random(0, 255);\n            color = \"rgb(\" + r + \", \" + g + \", \" + b + \")\";\n          }\n\n          let particle_opts = (({ friction, frictionStatic, inertia }) => ({ friction, frictionStatic, inertia}))(emitter.options);\n          env.particles[name] = Bodies.polygon(posX, posY, 6, size, {\n            isSensor: interactive,\n            isParticle: true,\n            isStatic: emitter.options.isStatic,\n            density: 1,\n            restitution: emitter.options.restituition,\n            frictionAir: frictionAir,\n            decaySpeed: options.decaySpeed,\n            render: {\n              fillStyle: color\n            },\n            ...particle_opts\n          });\n          let particle = env.particles[name];\n          World.add(env.world, particle);\n\n          if (collisionFilter !== undefined) {\n            particle.collisionFilter = collisionFilter;\n          }\n\n          let velX = random(0, vel.x);\n          let velY = random(0, vel.y);\n\n          if (vel.y === undefined) {\n            velY = random(0, 2);\n          }\n          if (vel.x === undefined) {\n            velX = random(0, 2);\n          }\n\n          if (direction.x === undefined || direction.x === 0) {\n            velX = Boolean(Math.round(random())) ? velX : velX * -1;\n          } else {\n            velX *= direction.x;\n          }\n\n          if (direction.y === undefined || direction.y === 0) {\n            velY = Boolean(Math.round(random())) ? velY : velY * -1;\n          } else {\n            velY *= direction.y;\n          }\n          Body.setVelocity(particle, { x: velX, y: velY });\n\n          let scale = 1;\n          function decreaseScale() {\n            scale -= options.decaySpeed * env.engine.timing.timeScale;\n            particle.circleRadius = size * scale;\n            if (particle.circleRadius > options.decaySpeed) {\n              requestAnimationFrame(decreaseScale);\n            } else {\n              Composite.remove(env.world, particle);\n            }\n          }\n          setTimeout(decreaseScale, delay);\n\n          if (particlesAdded < number && !duplicate) {\n            if (interval > 0) {\n              let framesPast = 0;\n\n              function waitForInterval() {\n                if (emitter.options.amount > 0) {\n                  framesPast += env.engine.timing.timeScale;\n                  if (env.runner !== undefined && env.runner.fps !== undefined) {\n                    if (framesPast >= interval / (1000 / env.runner.fps)) {\n                      if (amountPerTick > 1) {\n                        for (let i = amountPerTick; i--; ) {\n                          if (i !== 0) {\n                            addParticle(true);\n                          } else {\n                            addParticle();\n                          }\n                        }\n                      } else {\n                        addParticle();\n                      }\n                    } else {\n                      requestAnimationFrame(waitForInterval);\n                    }\n                  } else {\n                    if (\n                      framesPast >=\n                      interval / 16.67 / env.engine.timing.timeScale\n                    ) {\n                      for (let i = amountPerTick; i--; ) {\n                        if (i !== 0) {\n                          addParticle(true);\n                        } else {\n                          addParticle();\n                        }\n                      }\n                    } else {\n                      requestAnimationFrame(waitForInterval);\n                    }\n                  }\n                } else {\n                  emitter.running = false;\n                }\n              }\n              requestAnimationFrame(waitForInterval);\n            } else {\n              addParticle();\n            }\n          }\n        }\n        addParticle();\n      }\n    }\n  };\n  return Particle;\n}\n","/* eslint no-unused-vars: \"off\" */\nimport Color from \"color\";\nimport Matter from \"matter-js\"\n\nvar Engine = Matter.Engine,\n  Render = Matter.Render,\n  Runner = Matter.Runner,\n  Composites = Matter.Composites,\n  Composite = Matter.Composite,\n  Common = Matter.Common,\n  World = Matter.World,\n  Bodies = Matter.Bodies,\n  Grid = Matter.Grid,\n  MouseConstraint = Matter.MouseConstraint,\n  Mouse = Matter.Mouse,\n  Body = Matter.Body,\n  Events = Matter.Events;\n\n\nexport default class Player {\n  ///////////////////// PLAYER\n  static get pallete() {\n    let out = '#F51720 #FA26A0 #F8D210 #2FF3E0'.split(' ').map(x => new Color(x))\n    return out\n  }\n\n  static idx = 0;\n  constructor(x, y, env) {\n    this.idx = Player.idx++;\n    this.max_health = 100;\n    this.health = this.max_health;\n    this.env = env;\n    this.world = this.env.world;\n    this.color = Player.pallete[this.idx % Player.pallete.length]\n    this.original_color = Player.pallete[this.idx % Player.pallete.length]\n    this.shape = this._build_shape(x, y);\n  }\n\n  _build_shape(x, y) {\n    let opts = {\n      isStatic: true,\n      render: {\n        fillStyle: this.color.string(),\n        strokeStyle: \"white\",\n        lineWidth: 3\n      },\n      collisionFilter: this.collision_filter\n    };\n    let shape = Bodies.rectangle(x, y, 30, 30, opts);\n    shape.player = this;\n    shape.is_player = true;\n    return shape;\n  }\n\n  get collision_filter() {\n    let category = 1 << (this.idx + 1); // +1 because category 1 is the default (walls)\n    let mask = -1 ^ category; // colide with all but yourself\n    return { category: category, mask: mask, group: 0 };\n  }\n\n  build_emmiter() {\n    let opts = {\n      amount: Infinity,\n      interval: 1001, // in millis\n      amountPerTick: 1, // batch size\n      size: { min: 5, max: 20 },\n      delay: 1000 * 10,\n      collisions: true,\n      restituition: 1,\n      colors: this.original_color.string(),\n      collisionFilter: this.collision_filter,\n      frictionStatic: 0,\n      frictionAir: 0,\n      friction: 0,\n      decaySpeed: 0.03,\n    };\n    // Composite.add(this.world, Bodies.polygon(300, 300, 10, 50, {restituition: 1, friction:0, frictionAir:0, frictionStatic:0}))\n    // return\n    this.emmiter = this.env.particle_factory.emitter.create(\n      this.x,\n      this.y,\n      opts\n    );\n    this.emmiter.start();\n  }\n\n  get x() {\n    return this.shape.position.x;\n  }\n\n  get y() {\n    return this.shape.position.y;\n  }\n\n  take_damage(damage) {\n    this.health -= damage;\n    if (this.health <= 0) {\n      this.die();\n    }\n    let health_percentage = this.health / this.max_health;\n    this.color = this.color.alpha(health_percentage)\n    this.shape.render.fillStyle = this.color.string();\n  }\n\n  die() {\n    console.log(`Player ${this.idx} DIED`);\n    Composite.remove(this.world, this.shape);\n    this.emmiter.stop();\n    this.dead = true;\n  }\n}\n\n","/* eslint no-unused-vars: \"off\" */\n\nimport Matter from \"matter-js\"\nimport {ParticleFactory} from \"./particle-factory.js\"\nimport Color from \"color\";\nimport Player from \"./player.js\"\n\nMatter.Resolver._restingThresh = 0.1 // solving bug: https://github.com/liabru/matter-js/issues/394\nMatter.Resolver._restingThreshTangent = 1\n\nconsole.clear();\n// matter-tools by liabru https://github.com/liabru/matter-tools\n\nvar Engine = Matter.Engine,\n  Render = Matter.Render,\n  Runner = Matter.Runner,\n  Composites = Matter.Composites,\n  Composite = Matter.Composite,\n  Common = Matter.Common,\n  World = Matter.World,\n  Bodies = Matter.Bodies,\n  Grid = Matter.Grid,\n  MouseConstraint = Matter.MouseConstraint,\n  Mouse = Matter.Mouse,\n  Body = Matter.Body,\n  Events = Matter.Events;\n\nwindow.H = 600;\nwindow.W = 800;\n\nclass Env {\n  setup(element_id) {\n    // create engine\n    this.engine = Engine.create({velocityIterations: 8});\n    this.engine.gravity.scale = 0;\n    this.world = this.engine.world;\n\n    this.particle_factory = ParticleFactory(this);\n\n    // create renderer\n    var render = Render.create({\n      element: document.getElementById(element_id),\n      engine: this.engine,\n      options: {\n        width: 800,\n        height: 600,\n        showAngleIndicator: true,\n        // showBroadphase: false,\n        showDebug: false,\n        wireframes: false\n      }\n    });\n    this.render = render;\n\n    Render.run(render);\n\n    // create runner\n    var runner = Runner.create();\n\n    this.build_play_field();\n    this.add_mouse_control();\n\n    this.build_players();\n\n\n    this.register_events();\n\n    Runner.run(runner, this.engine);\n\n    // fit the render viewport to the scene\n    Render.lookAt(render, {\n      min: { x: 0, y: 0 },\n      max: { x: 800, y: 600 }\n    });\n  }\n\n  add_mouse_control() {\n    var mouse = Mouse.create(this.render.canvas),\n      mouseConstraint = MouseConstraint.create(this.engine, {\n        mouse: mouse,\n        constraint: {\n          stiffness: 0.2,\n          render: {\n            visible: true\n          }\n        }\n      });\n\n    Composite.add(this.world, mouseConstraint);\n    // keep the mouse in sync with rendering\n    this.render.mouse = mouse;\n  }\n\n  stop() {\n    Matter.Render.stop(this.render);\n    Matter.Runner.stop(this.runner);\n  }\n\n  build_players() {\n    let margin = 20,\n      play_area = 100;\n    var p1 = new Player(0 + play_area + margin, window.H / 2, this);\n    var p2 = new Player(window.W - (play_area + margin), window.H / 2, this);\n    Composite.add(this.world, p1.shape);\n    Composite.add(this.world, p2.shape);\n    this.players = [p1, p2];\n    this.players.map((p) => p.build_emmiter());\n  }\n\n  build_play_field() {\n    // add bodies\n    let opts = { isStatic: true} //, friction:0, restituition:1, frictionStatic:0, inertia: 10000};\n    Composite.add(this.world, [\n      // walls\n      Bodies.rectangle(400, 0, 800, 100, opts),\n      Bodies.rectangle(400, 600, 800, 100, opts),\n      Bodies.rectangle(800, 300, 100, 600, opts),\n      Bodies.rectangle(0, 300, 100, 600, opts)\n    ]);\n  }\n\n  register_events() {\n    // cant seem to register event on players object themselves TODO: check this later\n    let particle_factory = this.particle_factory\n    Events.on(this.engine, \"collisionStart\", function (e) {\n      var pairs = e.pairs;\n      pairs = pairs.filter((el, _) => {\n        return el.bodyA.is_player || el.bodyB.is_player;\n      });\n\n      // change object colours to show those starting a collision\n      for (var i = 0; i < pairs.length; i++) {\n        let pair = pairs[i];\n        let player = pair.bodyA.is_player ? pair.bodyA : pair.bodyB;\n        let other = !pair.bodyA.is_player ? pair.bodyA : pair.bodyB;\n        player = player.player;\n        if (other.isParticle){\n            Composite.remove(this.world, other)\n            explode(other.position, particle_factory)\n        }\n        player.take_damage(21);\n      }\n    });\n  }\n\n  title = \"Env\";\n  for = \">=0.14.2\";\n}\n\nfunction explode(position, particle_factory) {\n    let emmiter = particle_factory.emitter.create(\n            position.x,\n            position.y,\n            {collisions: false, amount: 40, amountPerTick:10, interval: 1, collisionFilter:{group: -1}}\n            );\n    emmiter.start();\n}\n\n\n\n\nexport function restart(){\n  window.env = new Env();\n  window.document.getElementById(\"canvas\").innerHTML = \"\"\n  window.env.setup(\"canvas\");\n}\nwindow.restart = restart\n\n//window.restart()\n","import BTable from 'react-bootstrap/Table'\nimport {useTable} from 'react-table'\n\nexport function Table(props) {\n    let {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow\n    } = useTable({columns:props.columns, data: props.data})\n\n   return (\n     <BTable {...getTableProps()} striped bordered hover >\n       <thead>\n         {headerGroups.map(headerGroup => (\n           <tr {...headerGroup.getHeaderGroupProps()}>\n             {headerGroup.headers.map(column => (\n               <th {...column.getHeaderProps()} >\n                 {column.render('Header')}\n               </th>\n             ))}\n           </tr>\n         ))}\n       </thead>\n       <tbody {...getTableBodyProps()}>\n         {rows.map(row => {\n           prepareRow(row)\n           return (\n             <tr {...row.getRowProps()}>\n               {row.cells.map(cell => {\n                 return (\n                   <td\n                     {...cell.getCellProps()}\n                   >\n                     {cell.render('Cell')}\n                   </td>\n                 )\n               })}\n             </tr>\n           )\n         })}\n       </tbody>\n     </BTable>\n   )\n}\n","import './App.css';\nimport * as env from './env.js'\nimport {React, useEffect, useMemo} from 'react'\nimport {Table} from './table.js'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button'\n\nfunction App() {\n\n  useEffect(() => {\n      env.restart()\n  })\n\n\n  return (\n    <div className=\"App\">\n        <Button onClick={window.restart}> RESTART </Button>\n        <Info/>\n        <div id='canvas'> </div>\n    </div>\n  );\n}\n\n\nfunction Info() {\n    const stats = useMemo(() => [\n        {\n            name: 'Team1',\n            goals: 2\n        },\n        {\n            name: 'Team2',\n            goals: 5\n        },\n    ], [])\n    const columns = useMemo(() => [\n        {\n            Header: 'Nome | Player',\n            accessor: 'name', // accessor is the \"key\" in the data\n        }, {\n            Header: 'Gols | Max Health',\n            accessor: 'goals',\n        },\n    ], [])\n    return ( <Table data={stats} columns={columns}/>\n        /*\n        <thead>\n          <tr>\n            <th>First Name</th>\n            <th>Last Name</th>\n            <th>Username</th>\n          </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>1</td>\n                <td>Mark</td>\n                <td>Otto</td>\n                <td>@mdo</td>\n            </tr>\n            <tr>\n                <td>2</td>\n                <td>Jacob</td>\n                <td>Thornton</td>\n                <td>@fat</td>\n            </tr>\n        </tbody>\n        </Table>\n        //*/\n    )\n\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}